// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class AngleGLES3 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AngleGLES3(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AngleGLES3.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void glActiveTexture(
    int texture,
  ) {
    return _glActiveTexture(
      texture,
    );
  }

  late final _glActiveTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glActiveTexture');
  late final _glActiveTexture =
      _glActiveTexturePtr.asFunction<void Function(int)>();

  void glAttachShader(
    int program,
    int shader,
  ) {
    return _glAttachShader(
      program,
      shader,
    );
  }

  late final _glAttachShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glAttachShader');
  late final _glAttachShader =
      _glAttachShaderPtr.asFunction<void Function(int, int)>();

  void glBindAttribLocation(
    int program,
    int index,
    ffi.Pointer<GLchar> name,
  ) {
    return _glBindAttribLocation(
      program,
      index,
      name,
    );
  }

  late final _glBindAttribLocationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLuint, ffi.Pointer<GLchar>)>>('glBindAttribLocation');
  late final _glBindAttribLocation = _glBindAttribLocationPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLchar>)>();

  void glBindBuffer(
    int target,
    int buffer,
  ) {
    return _glBindBuffer(
      target,
      buffer,
    );
  }

  late final _glBindBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glBindBuffer');
  late final _glBindBuffer =
      _glBindBufferPtr.asFunction<void Function(int, int)>();

  void glBindFramebuffer(
    int target,
    int framebuffer,
  ) {
    return _glBindFramebuffer(
      target,
      framebuffer,
    );
  }

  late final _glBindFramebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glBindFramebuffer');
  late final _glBindFramebuffer =
      _glBindFramebufferPtr.asFunction<void Function(int, int)>();

  void glBindRenderbuffer(
    int target,
    int renderbuffer,
  ) {
    return _glBindRenderbuffer(
      target,
      renderbuffer,
    );
  }

  late final _glBindRenderbufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glBindRenderbuffer');
  late final _glBindRenderbuffer =
      _glBindRenderbufferPtr.asFunction<void Function(int, int)>();

  void glBindTexture(
    int target,
    int texture,
  ) {
    return _glBindTexture(
      target,
      texture,
    );
  }

  late final _glBindTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glBindTexture');
  late final _glBindTexture =
      _glBindTexturePtr.asFunction<void Function(int, int)>();

  void glBlendColor(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _glBlendColor(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _glBlendColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLfloat, GLfloat, GLfloat, GLfloat)>>('glBlendColor');
  late final _glBlendColor = _glBlendColorPtr
      .asFunction<void Function(double, double, double, double)>();

  void glBlendEquation(
    int mode,
  ) {
    return _glBlendEquation(
      mode,
    );
  }

  late final _glBlendEquationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glBlendEquation');
  late final _glBlendEquation =
      _glBlendEquationPtr.asFunction<void Function(int)>();

  void glBlendEquationSeparate(
    int modeRGB,
    int modeAlpha,
  ) {
    return _glBlendEquationSeparate(
      modeRGB,
      modeAlpha,
    );
  }

  late final _glBlendEquationSeparatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum)>>(
          'glBlendEquationSeparate');
  late final _glBlendEquationSeparate =
      _glBlendEquationSeparatePtr.asFunction<void Function(int, int)>();

  void glBlendFunc(
    int sfactor,
    int dfactor,
  ) {
    return _glBlendFunc(
      sfactor,
      dfactor,
    );
  }

  late final _glBlendFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum)>>(
          'glBlendFunc');
  late final _glBlendFunc =
      _glBlendFuncPtr.asFunction<void Function(int, int)>();

  void glBlendFuncSeparate(
    int sfactorRGB,
    int dfactorRGB,
    int sfactorAlpha,
    int dfactorAlpha,
  ) {
    return _glBlendFuncSeparate(
      sfactorRGB,
      dfactorRGB,
      sfactorAlpha,
      dfactorAlpha,
    );
  }

  late final _glBlendFuncSeparatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, GLenum, GLenum)>>('glBlendFuncSeparate');
  late final _glBlendFuncSeparate =
      _glBlendFuncSeparatePtr.asFunction<void Function(int, int, int, int)>();

  void glBufferData(
    int target,
    int size,
    ffi.Pointer<ffi.Void> data,
    int usage,
  ) {
    return _glBufferData(
      target,
      size,
      data,
      usage,
    );
  }

  late final _glBufferDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizeiptr, ffi.Pointer<ffi.Void>,
              GLenum)>>('glBufferData');
  late final _glBufferData = _glBufferDataPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  void glBufferSubData(
    int target,
    int offset,
    int size,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _glBufferSubData(
      target,
      offset,
      size,
      data,
    );
  }

  late final _glBufferSubDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLintptr, GLsizeiptr,
              ffi.Pointer<ffi.Void>)>>('glBufferSubData');
  late final _glBufferSubData = _glBufferSubDataPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int glCheckFramebufferStatus(
    int target,
  ) {
    return _glCheckFramebufferStatus(
      target,
    );
  }

  late final _glCheckFramebufferStatusPtr =
      _lookup<ffi.NativeFunction<GLenum Function(GLenum)>>(
          'glCheckFramebufferStatus');
  late final _glCheckFramebufferStatus =
      _glCheckFramebufferStatusPtr.asFunction<int Function(int)>();

  void glClear(
    int mask,
  ) {
    return _glClear(
      mask,
    );
  }

  late final _glClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLbitfield)>>('glClear');
  late final _glClear = _glClearPtr.asFunction<void Function(int)>();

  void glClearColor(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _glClearColor(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _glClearColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLfloat, GLfloat, GLfloat, GLfloat)>>('glClearColor');
  late final _glClearColor = _glClearColorPtr
      .asFunction<void Function(double, double, double, double)>();

  void glClearDepthf(
    double d,
  ) {
    return _glClearDepthf(
      d,
    );
  }

  late final _glClearDepthfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLfloat)>>('glClearDepthf');
  late final _glClearDepthf =
      _glClearDepthfPtr.asFunction<void Function(double)>();

  void glClearStencil(
    int s,
  ) {
    return _glClearStencil(
      s,
    );
  }

  late final _glClearStencilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint)>>('glClearStencil');
  late final _glClearStencil =
      _glClearStencilPtr.asFunction<void Function(int)>();

  void glColorMask(
    int red,
    int green,
    int blue,
    int alpha,
  ) {
    return _glColorMask(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _glColorMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLboolean, GLboolean, GLboolean, GLboolean)>>('glColorMask');
  late final _glColorMask =
      _glColorMaskPtr.asFunction<void Function(int, int, int, int)>();

  void glCompileShader(
    int shader,
  ) {
    return _glCompileShader(
      shader,
    );
  }

  late final _glCompileShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>('glCompileShader');
  late final _glCompileShader =
      _glCompileShaderPtr.asFunction<void Function(int)>();

  void glCompressedTexImage2D(
    int target,
    int level,
    int internalformat,
    int width,
    int height,
    int border,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _glCompressedTexImage2D(
      target,
      level,
      internalformat,
      width,
      height,
      border,
      imageSize,
      data,
    );
  }

  late final _glCompressedTexImage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint,
              GLsizei, ffi.Pointer<ffi.Void>)>>('glCompressedTexImage2D');
  late final _glCompressedTexImage2D = _glCompressedTexImage2DPtr.asFunction<
      void Function(
          int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glCompressedTexSubImage2D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int width,
    int height,
    int format,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _glCompressedTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      imageSize,
      data,
    );
  }

  late final _glCompressedTexSubImage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum,
              GLint,
              GLint,
              GLint,
              GLsizei,
              GLsizei,
              GLenum,
              GLsizei,
              ffi.Pointer<ffi.Void>)>>('glCompressedTexSubImage2D');
  late final _glCompressedTexSubImage2D =
      _glCompressedTexSubImage2DPtr.asFunction<
          void Function(
              int, int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glCopyTexImage2D(
    int target,
    int level,
    int internalformat,
    int x,
    int y,
    int width,
    int height,
    int border,
  ) {
    return _glCopyTexImage2D(
      target,
      level,
      internalformat,
      x,
      y,
      width,
      height,
      border,
    );
  }

  late final _glCopyTexImage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLenum, GLint, GLint, GLsizei,
              GLsizei, GLint)>>('glCopyTexImage2D');
  late final _glCopyTexImage2D = _glCopyTexImage2DPtr
      .asFunction<void Function(int, int, int, int, int, int, int, int)>();

  void glCopyTexSubImage2D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _glCopyTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      x,
      y,
      width,
      height,
    );
  }

  late final _glCopyTexSubImage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei,
              GLsizei)>>('glCopyTexSubImage2D');
  late final _glCopyTexSubImage2D = _glCopyTexSubImage2DPtr
      .asFunction<void Function(int, int, int, int, int, int, int, int)>();

  int glCreateProgram() {
    return _glCreateProgram();
  }

  late final _glCreateProgramPtr =
      _lookup<ffi.NativeFunction<GLuint Function()>>('glCreateProgram');
  late final _glCreateProgram =
      _glCreateProgramPtr.asFunction<int Function()>();

  int glCreateShader(
    int type,
  ) {
    return _glCreateShader(
      type,
    );
  }

  late final _glCreateShaderPtr =
      _lookup<ffi.NativeFunction<GLuint Function(GLenum)>>('glCreateShader');
  late final _glCreateShader =
      _glCreateShaderPtr.asFunction<int Function(int)>();

  void glCullFace(
    int mode,
  ) {
    return _glCullFace(
      mode,
    );
  }

  late final _glCullFacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glCullFace');
  late final _glCullFace = _glCullFacePtr.asFunction<void Function(int)>();

  void glDeleteBuffers(
    int n,
    ffi.Pointer<GLuint> buffers,
  ) {
    return _glDeleteBuffers(
      n,
      buffers,
    );
  }

  late final _glDeleteBuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteBuffers');
  late final _glDeleteBuffers =
      _glDeleteBuffersPtr.asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glDeleteFramebuffers(
    int n,
    ffi.Pointer<GLuint> framebuffers,
  ) {
    return _glDeleteFramebuffers(
      n,
      framebuffers,
    );
  }

  late final _glDeleteFramebuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteFramebuffers');
  late final _glDeleteFramebuffers = _glDeleteFramebuffersPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glDeleteProgram(
    int program,
  ) {
    return _glDeleteProgram(
      program,
    );
  }

  late final _glDeleteProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>('glDeleteProgram');
  late final _glDeleteProgram =
      _glDeleteProgramPtr.asFunction<void Function(int)>();

  void glDeleteRenderbuffers(
    int n,
    ffi.Pointer<GLuint> renderbuffers,
  ) {
    return _glDeleteRenderbuffers(
      n,
      renderbuffers,
    );
  }

  late final _glDeleteRenderbuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteRenderbuffers');
  late final _glDeleteRenderbuffers = _glDeleteRenderbuffersPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glDeleteShader(
    int shader,
  ) {
    return _glDeleteShader(
      shader,
    );
  }

  late final _glDeleteShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>('glDeleteShader');
  late final _glDeleteShader =
      _glDeleteShaderPtr.asFunction<void Function(int)>();

  void glDeleteTextures(
    int n,
    ffi.Pointer<GLuint> textures,
  ) {
    return _glDeleteTextures(
      n,
      textures,
    );
  }

  late final _glDeleteTexturesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteTextures');
  late final _glDeleteTextures = _glDeleteTexturesPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glDepthFunc(
    int func,
  ) {
    return _glDepthFunc(
      func,
    );
  }

  late final _glDepthFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glDepthFunc');
  late final _glDepthFunc = _glDepthFuncPtr.asFunction<void Function(int)>();

  void glDepthMask(
    int flag,
  ) {
    return _glDepthMask(
      flag,
    );
  }

  late final _glDepthMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLboolean)>>('glDepthMask');
  late final _glDepthMask = _glDepthMaskPtr.asFunction<void Function(int)>();

  void glDepthRangef(
    double n,
    double f,
  ) {
    return _glDepthRangef(
      n,
      f,
    );
  }

  late final _glDepthRangefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLfloat, GLfloat)>>(
          'glDepthRangef');
  late final _glDepthRangef =
      _glDepthRangefPtr.asFunction<void Function(double, double)>();

  void glDetachShader(
    int program,
    int shader,
  ) {
    return _glDetachShader(
      program,
      shader,
    );
  }

  late final _glDetachShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glDetachShader');
  late final _glDetachShader =
      _glDetachShaderPtr.asFunction<void Function(int, int)>();

  void glDisable(
    int cap,
  ) {
    return _glDisable(
      cap,
    );
  }

  late final _glDisablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glDisable');
  late final _glDisable = _glDisablePtr.asFunction<void Function(int)>();

  void glDisableVertexAttribArray(
    int index,
  ) {
    return _glDisableVertexAttribArray(
      index,
    );
  }

  late final _glDisableVertexAttribArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>(
          'glDisableVertexAttribArray');
  late final _glDisableVertexAttribArray =
      _glDisableVertexAttribArrayPtr.asFunction<void Function(int)>();

  void glDrawArrays(
    int mode,
    int first,
    int count,
  ) {
    return _glDrawArrays(
      mode,
      first,
      count,
    );
  }

  late final _glDrawArraysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLint, GLsizei)>>(
          'glDrawArrays');
  late final _glDrawArrays =
      _glDrawArraysPtr.asFunction<void Function(int, int, int)>();

  void glDrawElements(
    int mode,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
  ) {
    return _glDrawElements(
      mode,
      count,
      type,
      indices,
    );
  }

  late final _glDrawElementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum,
              ffi.Pointer<ffi.Void>)>>('glDrawElements');
  late final _glDrawElements = _glDrawElementsPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  void glEnable(
    int cap,
  ) {
    return _glEnable(
      cap,
    );
  }

  late final _glEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glEnable');
  late final _glEnable = _glEnablePtr.asFunction<void Function(int)>();

  void glEnableVertexAttribArray(
    int index,
  ) {
    return _glEnableVertexAttribArray(
      index,
    );
  }

  late final _glEnableVertexAttribArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>(
          'glEnableVertexAttribArray');
  late final _glEnableVertexAttribArray =
      _glEnableVertexAttribArrayPtr.asFunction<void Function(int)>();

  void glFinish() {
    return _glFinish();
  }

  late final _glFinishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('glFinish');
  late final _glFinish = _glFinishPtr.asFunction<void Function()>();

  void glFlush() {
    return _glFlush();
  }

  late final _glFlushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('glFlush');
  late final _glFlush = _glFlushPtr.asFunction<void Function()>();

  void glFramebufferRenderbuffer(
    int target,
    int attachment,
    int renderbuffertarget,
    int renderbuffer,
  ) {
    return _glFramebufferRenderbuffer(
      target,
      attachment,
      renderbuffertarget,
      renderbuffer,
    );
  }

  late final _glFramebufferRenderbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, GLenum, GLuint)>>('glFramebufferRenderbuffer');
  late final _glFramebufferRenderbuffer = _glFramebufferRenderbufferPtr
      .asFunction<void Function(int, int, int, int)>();

  void glFramebufferTexture2D(
    int target,
    int attachment,
    int textarget,
    int texture,
    int level,
  ) {
    return _glFramebufferTexture2D(
      target,
      attachment,
      textarget,
      texture,
      level,
    );
  }

  late final _glFramebufferTexture2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLenum, GLuint,
              GLint)>>('glFramebufferTexture2D');
  late final _glFramebufferTexture2D = _glFramebufferTexture2DPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glFrontFace(
    int mode,
  ) {
    return _glFrontFace(
      mode,
    );
  }

  late final _glFrontFacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glFrontFace');
  late final _glFrontFace = _glFrontFacePtr.asFunction<void Function(int)>();

  void glGenBuffers(
    int n,
    ffi.Pointer<GLuint> buffers,
  ) {
    return _glGenBuffers(
      n,
      buffers,
    );
  }

  late final _glGenBuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenBuffers');
  late final _glGenBuffers =
      _glGenBuffersPtr.asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGenerateMipmap(
    int target,
  ) {
    return _glGenerateMipmap(
      target,
    );
  }

  late final _glGenerateMipmapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>(
          'glGenerateMipmap');
  late final _glGenerateMipmap =
      _glGenerateMipmapPtr.asFunction<void Function(int)>();

  void glGenFramebuffers(
    int n,
    ffi.Pointer<GLuint> framebuffers,
  ) {
    return _glGenFramebuffers(
      n,
      framebuffers,
    );
  }

  late final _glGenFramebuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenFramebuffers');
  late final _glGenFramebuffers = _glGenFramebuffersPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGenRenderbuffers(
    int n,
    ffi.Pointer<GLuint> renderbuffers,
  ) {
    return _glGenRenderbuffers(
      n,
      renderbuffers,
    );
  }

  late final _glGenRenderbuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenRenderbuffers');
  late final _glGenRenderbuffers = _glGenRenderbuffersPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGenTextures(
    int n,
    ffi.Pointer<GLuint> textures,
  ) {
    return _glGenTextures(
      n,
      textures,
    );
  }

  late final _glGenTexturesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenTextures');
  late final _glGenTextures =
      _glGenTexturesPtr.asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGetActiveAttrib(
    int program,
    int index,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLint> size,
    ffi.Pointer<GLenum> type,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetActiveAttrib(
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    );
  }

  late final _glGetActiveAttribPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLuint,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLint>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLchar>)>>('glGetActiveAttrib');
  late final _glGetActiveAttrib = _glGetActiveAttribPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLint>,
          ffi.Pointer<GLenum>, ffi.Pointer<GLchar>)>();

  void glGetActiveUniform(
    int program,
    int index,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLint> size,
    ffi.Pointer<GLenum> type,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetActiveUniform(
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    );
  }

  late final _glGetActiveUniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLuint,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLint>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLchar>)>>('glGetActiveUniform');
  late final _glGetActiveUniform = _glGetActiveUniformPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLint>,
          ffi.Pointer<GLenum>, ffi.Pointer<GLchar>)>();

  void glGetAttachedShaders(
    int program,
    int maxCount,
    ffi.Pointer<GLsizei> count,
    ffi.Pointer<GLuint> shaders,
  ) {
    return _glGetAttachedShaders(
      program,
      maxCount,
      count,
      shaders,
    );
  }

  late final _glGetAttachedShadersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLuint>)>>('glGetAttachedShaders');
  late final _glGetAttachedShaders = _glGetAttachedShadersPtr.asFunction<
      void Function(int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLuint>)>();

  int glGetAttribLocation(
    int program,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetAttribLocation(
      program,
      name,
    );
  }

  late final _glGetAttribLocationPtr =
      _lookup<ffi.NativeFunction<GLint Function(GLuint, ffi.Pointer<GLchar>)>>(
          'glGetAttribLocation');
  late final _glGetAttribLocation = _glGetAttribLocationPtr
      .asFunction<int Function(int, ffi.Pointer<GLchar>)>();

  void glGetBooleanv(
    int pname,
    ffi.Pointer<GLboolean> data,
  ) {
    return _glGetBooleanv(
      pname,
      data,
    );
  }

  late final _glGetBooleanvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, ffi.Pointer<GLboolean>)>>('glGetBooleanv');
  late final _glGetBooleanv = _glGetBooleanvPtr
      .asFunction<void Function(int, ffi.Pointer<GLboolean>)>();

  void glGetBufferParameteriv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetBufferParameteriv(
      target,
      pname,
      params,
    );
  }

  late final _glGetBufferParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLint>)>>('glGetBufferParameteriv');
  late final _glGetBufferParameteriv = _glGetBufferParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  int glGetError() {
    return _glGetError();
  }

  late final _glGetErrorPtr =
      _lookup<ffi.NativeFunction<GLenum Function()>>('glGetError');
  late final _glGetError = _glGetErrorPtr.asFunction<int Function()>();

  void glGetFloatv(
    int pname,
    ffi.Pointer<GLfloat> data,
  ) {
    return _glGetFloatv(
      pname,
      data,
    );
  }

  late final _glGetFloatvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, ffi.Pointer<GLfloat>)>>(
      'glGetFloatv');
  late final _glGetFloatv =
      _glGetFloatvPtr.asFunction<void Function(int, ffi.Pointer<GLfloat>)>();

  void glGetFramebufferAttachmentParameteriv(
    int target,
    int attachment,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetFramebufferAttachmentParameteriv(
      target,
      attachment,
      pname,
      params,
    );
  }

  late final _glGetFramebufferAttachmentParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLenum,
              ffi.Pointer<GLint>)>>('glGetFramebufferAttachmentParameteriv');
  late final _glGetFramebufferAttachmentParameteriv =
      _glGetFramebufferAttachmentParameterivPtr
          .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glGetIntegerv(
    int pname,
    ffi.Pointer<GLint> data,
  ) {
    return _glGetIntegerv(
      pname,
      data,
    );
  }

  late final _glGetIntegervPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, ffi.Pointer<GLint>)>>(
      'glGetIntegerv');
  late final _glGetIntegerv =
      _glGetIntegervPtr.asFunction<void Function(int, ffi.Pointer<GLint>)>();

  void glGetProgramiv(
    int program,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetProgramiv(
      program,
      pname,
      params,
    );
  }

  late final _glGetProgramivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetProgramiv');
  late final _glGetProgramiv = _glGetProgramivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetProgramInfoLog(
    int program,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> infoLog,
  ) {
    return _glGetProgramInfoLog(
      program,
      bufSize,
      length,
      infoLog,
    );
  }

  late final _glGetProgramInfoLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetProgramInfoLog');
  late final _glGetProgramInfoLog = _glGetProgramInfoLogPtr.asFunction<
      void Function(int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  void glGetRenderbufferParameteriv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetRenderbufferParameteriv(
      target,
      pname,
      params,
    );
  }

  late final _glGetRenderbufferParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum,
              ffi.Pointer<GLint>)>>('glGetRenderbufferParameteriv');
  late final _glGetRenderbufferParameteriv = _glGetRenderbufferParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetShaderiv(
    int shader,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetShaderiv(
      shader,
      pname,
      params,
    );
  }

  late final _glGetShaderivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetShaderiv');
  late final _glGetShaderiv = _glGetShaderivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetShaderInfoLog(
    int shader,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> infoLog,
  ) {
    return _glGetShaderInfoLog(
      shader,
      bufSize,
      length,
      infoLog,
    );
  }

  late final _glGetShaderInfoLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetShaderInfoLog');
  late final _glGetShaderInfoLog = _glGetShaderInfoLogPtr.asFunction<
      void Function(int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  void glGetShaderPrecisionFormat(
    int shadertype,
    int precisiontype,
    ffi.Pointer<GLint> range,
    ffi.Pointer<GLint> precision,
  ) {
    return _glGetShaderPrecisionFormat(
      shadertype,
      precisiontype,
      range,
      precision,
    );
  }

  late final _glGetShaderPrecisionFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, ffi.Pointer<GLint>,
              ffi.Pointer<GLint>)>>('glGetShaderPrecisionFormat');
  late final _glGetShaderPrecisionFormat =
      _glGetShaderPrecisionFormatPtr.asFunction<
          void Function(int, int, ffi.Pointer<GLint>, ffi.Pointer<GLint>)>();

  void glGetShaderSource(
    int shader,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> source,
  ) {
    return _glGetShaderSource(
      shader,
      bufSize,
      length,
      source,
    );
  }

  late final _glGetShaderSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetShaderSource');
  late final _glGetShaderSource = _glGetShaderSourcePtr.asFunction<
      void Function(int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  ffi.Pointer<GLubyte> glGetString(
    int name,
  ) {
    return _glGetString(
      name,
    );
  }

  late final _glGetStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GLubyte> Function(GLenum)>>(
          'glGetString');
  late final _glGetString =
      _glGetStringPtr.asFunction<ffi.Pointer<GLubyte> Function(int)>();

  void glGetTexParameterfv(
    int target,
    int pname,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glGetTexParameterfv(
      target,
      pname,
      params,
    );
  }

  late final _glGetTexParameterfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLfloat>)>>('glGetTexParameterfv');
  late final _glGetTexParameterfv = _glGetTexParameterfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glGetTexParameteriv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetTexParameteriv(
      target,
      pname,
      params,
    );
  }

  late final _glGetTexParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLint>)>>('glGetTexParameteriv');
  late final _glGetTexParameteriv = _glGetTexParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetUniformfv(
    int program,
    int location,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glGetUniformfv(
      program,
      location,
      params,
    );
  }

  late final _glGetUniformfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, ffi.Pointer<GLfloat>)>>('glGetUniformfv');
  late final _glGetUniformfv = _glGetUniformfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glGetUniformiv(
    int program,
    int location,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetUniformiv(
      program,
      location,
      params,
    );
  }

  late final _glGetUniformivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, ffi.Pointer<GLint>)>>('glGetUniformiv');
  late final _glGetUniformiv = _glGetUniformivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  int glGetUniformLocation(
    int program,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetUniformLocation(
      program,
      name,
    );
  }

  late final _glGetUniformLocationPtr =
      _lookup<ffi.NativeFunction<GLint Function(GLuint, ffi.Pointer<GLchar>)>>(
          'glGetUniformLocation');
  late final _glGetUniformLocation = _glGetUniformLocationPtr
      .asFunction<int Function(int, ffi.Pointer<GLchar>)>();

  void glGetVertexAttribfv(
    int index,
    int pname,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glGetVertexAttribfv(
      index,
      pname,
      params,
    );
  }

  late final _glGetVertexAttribfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLfloat>)>>('glGetVertexAttribfv');
  late final _glGetVertexAttribfv = _glGetVertexAttribfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glGetVertexAttribiv(
    int index,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetVertexAttribiv(
      index,
      pname,
      params,
    );
  }

  late final _glGetVertexAttribivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetVertexAttribiv');
  late final _glGetVertexAttribiv = _glGetVertexAttribivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetVertexAttribPointerv(
    int index,
    int pname,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pointer,
  ) {
    return _glGetVertexAttribPointerv(
      index,
      pname,
      pointer,
    );
  }

  late final _glGetVertexAttribPointervPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  GLuint, GLenum, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'glGetVertexAttribPointerv');
  late final _glGetVertexAttribPointerv =
      _glGetVertexAttribPointervPtr.asFunction<
          void Function(int, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void glHint(
    int target,
    int mode,
  ) {
    return _glHint(
      target,
      mode,
    );
  }

  late final _glHintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum)>>('glHint');
  late final _glHint = _glHintPtr.asFunction<void Function(int, int)>();

  int glIsBuffer(
    int buffer,
  ) {
    return _glIsBuffer(
      buffer,
    );
  }

  late final _glIsBufferPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>('glIsBuffer');
  late final _glIsBuffer = _glIsBufferPtr.asFunction<int Function(int)>();

  int glIsEnabled(
    int cap,
  ) {
    return _glIsEnabled(
      cap,
    );
  }

  late final _glIsEnabledPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLenum)>>('glIsEnabled');
  late final _glIsEnabled = _glIsEnabledPtr.asFunction<int Function(int)>();

  int glIsFramebuffer(
    int framebuffer,
  ) {
    return _glIsFramebuffer(
      framebuffer,
    );
  }

  late final _glIsFramebufferPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>(
          'glIsFramebuffer');
  late final _glIsFramebuffer =
      _glIsFramebufferPtr.asFunction<int Function(int)>();

  int glIsProgram(
    int program,
  ) {
    return _glIsProgram(
      program,
    );
  }

  late final _glIsProgramPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>('glIsProgram');
  late final _glIsProgram = _glIsProgramPtr.asFunction<int Function(int)>();

  int glIsRenderbuffer(
    int renderbuffer,
  ) {
    return _glIsRenderbuffer(
      renderbuffer,
    );
  }

  late final _glIsRenderbufferPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>(
          'glIsRenderbuffer');
  late final _glIsRenderbuffer =
      _glIsRenderbufferPtr.asFunction<int Function(int)>();

  int glIsShader(
    int shader,
  ) {
    return _glIsShader(
      shader,
    );
  }

  late final _glIsShaderPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>('glIsShader');
  late final _glIsShader = _glIsShaderPtr.asFunction<int Function(int)>();

  int glIsTexture(
    int texture,
  ) {
    return _glIsTexture(
      texture,
    );
  }

  late final _glIsTexturePtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>('glIsTexture');
  late final _glIsTexture = _glIsTexturePtr.asFunction<int Function(int)>();

  void glLineWidth(
    double width,
  ) {
    return _glLineWidth(
      width,
    );
  }

  late final _glLineWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLfloat)>>('glLineWidth');
  late final _glLineWidth = _glLineWidthPtr.asFunction<void Function(double)>();

  void glLinkProgram(
    int program,
  ) {
    return _glLinkProgram(
      program,
    );
  }

  late final _glLinkProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>('glLinkProgram');
  late final _glLinkProgram =
      _glLinkProgramPtr.asFunction<void Function(int)>();

  void glPixelStorei(
    int pname,
    int param,
  ) {
    return _glPixelStorei(
      pname,
      param,
    );
  }

  late final _glPixelStoreiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLint)>>(
          'glPixelStorei');
  late final _glPixelStorei =
      _glPixelStoreiPtr.asFunction<void Function(int, int)>();

  void glPolygonOffset(
    double factor,
    double units,
  ) {
    return _glPolygonOffset(
      factor,
      units,
    );
  }

  late final _glPolygonOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLfloat, GLfloat)>>(
          'glPolygonOffset');
  late final _glPolygonOffset =
      _glPolygonOffsetPtr.asFunction<void Function(double, double)>();

  void glReadPixels(
    int x,
    int y,
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _glReadPixels(
      x,
      y,
      width,
      height,
      format,
      type,
      pixels,
    );
  }

  late final _glReadPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum,
              ffi.Pointer<ffi.Void>)>>('glReadPixels');
  late final _glReadPixels = _glReadPixelsPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glReleaseShaderCompiler() {
    return _glReleaseShaderCompiler();
  }

  late final _glReleaseShaderCompilerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'glReleaseShaderCompiler');
  late final _glReleaseShaderCompiler =
      _glReleaseShaderCompilerPtr.asFunction<void Function()>();

  void glRenderbufferStorage(
    int target,
    int internalformat,
    int width,
    int height,
  ) {
    return _glRenderbufferStorage(
      target,
      internalformat,
      width,
      height,
    );
  }

  late final _glRenderbufferStoragePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, GLsizei, GLsizei)>>('glRenderbufferStorage');
  late final _glRenderbufferStorage =
      _glRenderbufferStoragePtr.asFunction<void Function(int, int, int, int)>();

  void glSampleCoverage(
    double value,
    int invert,
  ) {
    return _glSampleCoverage(
      value,
      invert,
    );
  }

  late final _glSampleCoveragePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLfloat, GLboolean)>>(
          'glSampleCoverage');
  late final _glSampleCoverage =
      _glSampleCoveragePtr.asFunction<void Function(double, int)>();

  void glScissor(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _glScissor(
      x,
      y,
      width,
      height,
    );
  }

  late final _glScissorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLint, GLsizei, GLsizei)>>('glScissor');
  late final _glScissor =
      _glScissorPtr.asFunction<void Function(int, int, int, int)>();

  void glShaderBinary(
    int count,
    ffi.Pointer<GLuint> shaders,
    int binaryformat,
    ffi.Pointer<ffi.Void> binary,
    int length,
  ) {
    return _glShaderBinary(
      count,
      shaders,
      binaryformat,
      binary,
      length,
    );
  }

  late final _glShaderBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLsizei, ffi.Pointer<GLuint>, GLenum,
              ffi.Pointer<ffi.Void>, GLsizei)>>('glShaderBinary');
  late final _glShaderBinary = _glShaderBinaryPtr.asFunction<
      void Function(
          int, ffi.Pointer<GLuint>, int, ffi.Pointer<ffi.Void>, int)>();

  void glShaderSource(
    int shader,
    int count,
    ffi.Pointer<ffi.Pointer<GLchar>> string,
    ffi.Pointer<GLint> length,
  ) {
    return _glShaderSource(
      shader,
      count,
      string,
      length,
    );
  }

  late final _glShaderSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<ffi.Pointer<GLchar>>,
              ffi.Pointer<GLint>)>>('glShaderSource');
  late final _glShaderSource = _glShaderSourcePtr.asFunction<
      void Function(
          int, int, ffi.Pointer<ffi.Pointer<GLchar>>, ffi.Pointer<GLint>)>();

  void glStencilFunc(
    int func,
    int ref,
    int mask,
  ) {
    return _glStencilFunc(
      func,
      ref,
      mask,
    );
  }

  late final _glStencilFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLint, GLuint)>>(
          'glStencilFunc');
  late final _glStencilFunc =
      _glStencilFuncPtr.asFunction<void Function(int, int, int)>();

  void glStencilFuncSeparate(
    int face,
    int func,
    int ref,
    int mask,
  ) {
    return _glStencilFuncSeparate(
      face,
      func,
      ref,
      mask,
    );
  }

  late final _glStencilFuncSeparatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLint, GLuint)>>(
      'glStencilFuncSeparate');
  late final _glStencilFuncSeparate =
      _glStencilFuncSeparatePtr.asFunction<void Function(int, int, int, int)>();

  void glStencilMask(
    int mask,
  ) {
    return _glStencilMask(
      mask,
    );
  }

  late final _glStencilMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>('glStencilMask');
  late final _glStencilMask =
      _glStencilMaskPtr.asFunction<void Function(int)>();

  void glStencilMaskSeparate(
    int face,
    int mask,
  ) {
    return _glStencilMaskSeparate(
      face,
      mask,
    );
  }

  late final _glStencilMaskSeparatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glStencilMaskSeparate');
  late final _glStencilMaskSeparate =
      _glStencilMaskSeparatePtr.asFunction<void Function(int, int)>();

  void glStencilOp(
    int fail,
    int zfail,
    int zpass,
  ) {
    return _glStencilOp(
      fail,
      zfail,
      zpass,
    );
  }

  late final _glStencilOpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLenum)>>(
          'glStencilOp');
  late final _glStencilOp =
      _glStencilOpPtr.asFunction<void Function(int, int, int)>();

  void glStencilOpSeparate(
    int face,
    int sfail,
    int dpfail,
    int dppass,
  ) {
    return _glStencilOpSeparate(
      face,
      sfail,
      dpfail,
      dppass,
    );
  }

  late final _glStencilOpSeparatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, GLenum, GLenum)>>('glStencilOpSeparate');
  late final _glStencilOpSeparate =
      _glStencilOpSeparatePtr.asFunction<void Function(int, int, int, int)>();

  void glTexImage2D(
    int target,
    int level,
    int internalformat,
    int width,
    int height,
    int border,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _glTexImage2D(
      target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      pixels,
    );
  }

  late final _glTexImage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLint, GLsizei, GLsizei, GLint,
              GLenum, GLenum, ffi.Pointer<ffi.Void>)>>('glTexImage2D');
  late final _glTexImage2D = _glTexImage2DPtr.asFunction<
      void Function(
          int, int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glTexParameterf(
    int target,
    int pname,
    double param,
  ) {
    return _glTexParameterf(
      target,
      pname,
      param,
    );
  }

  late final _glTexParameterfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLfloat)>>(
          'glTexParameterf');
  late final _glTexParameterf =
      _glTexParameterfPtr.asFunction<void Function(int, int, double)>();

  void glTexParameterfv(
    int target,
    int pname,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glTexParameterfv(
      target,
      pname,
      params,
    );
  }

  late final _glTexParameterfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLfloat>)>>('glTexParameterfv');
  late final _glTexParameterfv = _glTexParameterfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glTexParameteri(
    int target,
    int pname,
    int param,
  ) {
    return _glTexParameteri(
      target,
      pname,
      param,
    );
  }

  late final _glTexParameteriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLint)>>(
          'glTexParameteri');
  late final _glTexParameteri =
      _glTexParameteriPtr.asFunction<void Function(int, int, int)>();

  void glTexParameteriv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glTexParameteriv(
      target,
      pname,
      params,
    );
  }

  late final _glTexParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLint>)>>('glTexParameteriv');
  late final _glTexParameteriv = _glTexParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glTexSubImage2D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int width,
    int height,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _glTexSubImage2D(
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      pixels,
    );
  }

  late final _glTexSubImage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLint, GLint, GLsizei, GLsizei,
              GLenum, GLenum, ffi.Pointer<ffi.Void>)>>('glTexSubImage2D');
  late final _glTexSubImage2D = _glTexSubImage2DPtr.asFunction<
      void Function(
          int, int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glUniform1f(
    int location,
    double v0,
  ) {
    return _glUniform1f(
      location,
      v0,
    );
  }

  late final _glUniform1fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint, GLfloat)>>(
          'glUniform1f');
  late final _glUniform1f =
      _glUniform1fPtr.asFunction<void Function(int, double)>();

  void glUniform1fv(
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniform1fv(
      location,
      count,
      value,
    );
  }

  late final _glUniform1fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLfloat>)>>('glUniform1fv');
  late final _glUniform1fv = _glUniform1fvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glUniform1i(
    int location,
    int v0,
  ) {
    return _glUniform1i(
      location,
      v0,
    );
  }

  late final _glUniform1iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint, GLint)>>(
          'glUniform1i');
  late final _glUniform1i =
      _glUniform1iPtr.asFunction<void Function(int, int)>();

  void glUniform1iv(
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glUniform1iv(
      location,
      count,
      value,
    );
  }

  late final _glUniform1ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLint>)>>('glUniform1iv');
  late final _glUniform1iv = _glUniform1ivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glUniform2f(
    int location,
    double v0,
    double v1,
  ) {
    return _glUniform2f(
      location,
      v0,
      v1,
    );
  }

  late final _glUniform2fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint, GLfloat, GLfloat)>>(
          'glUniform2f');
  late final _glUniform2f =
      _glUniform2fPtr.asFunction<void Function(int, double, double)>();

  void glUniform2fv(
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniform2fv(
      location,
      count,
      value,
    );
  }

  late final _glUniform2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLfloat>)>>('glUniform2fv');
  late final _glUniform2fv = _glUniform2fvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glUniform2i(
    int location,
    int v0,
    int v1,
  ) {
    return _glUniform2i(
      location,
      v0,
      v1,
    );
  }

  late final _glUniform2iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint, GLint, GLint)>>(
          'glUniform2i');
  late final _glUniform2i =
      _glUniform2iPtr.asFunction<void Function(int, int, int)>();

  void glUniform2iv(
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glUniform2iv(
      location,
      count,
      value,
    );
  }

  late final _glUniform2ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLint>)>>('glUniform2iv');
  late final _glUniform2iv = _glUniform2ivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glUniform3f(
    int location,
    double v0,
    double v1,
    double v2,
  ) {
    return _glUniform3f(
      location,
      v0,
      v1,
      v2,
    );
  }

  late final _glUniform3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLfloat, GLfloat, GLfloat)>>('glUniform3f');
  late final _glUniform3f =
      _glUniform3fPtr.asFunction<void Function(int, double, double, double)>();

  void glUniform3fv(
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniform3fv(
      location,
      count,
      value,
    );
  }

  late final _glUniform3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLfloat>)>>('glUniform3fv');
  late final _glUniform3fv = _glUniform3fvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glUniform3i(
    int location,
    int v0,
    int v1,
    int v2,
  ) {
    return _glUniform3i(
      location,
      v0,
      v1,
      v2,
    );
  }

  late final _glUniform3iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLint, GLint, GLint, GLint)>>(
      'glUniform3i');
  late final _glUniform3i =
      _glUniform3iPtr.asFunction<void Function(int, int, int, int)>();

  void glUniform3iv(
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glUniform3iv(
      location,
      count,
      value,
    );
  }

  late final _glUniform3ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLint>)>>('glUniform3iv');
  late final _glUniform3iv = _glUniform3ivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glUniform4f(
    int location,
    double v0,
    double v1,
    double v2,
    double v3,
  ) {
    return _glUniform4f(
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  late final _glUniform4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLfloat, GLfloat, GLfloat, GLfloat)>>('glUniform4f');
  late final _glUniform4f = _glUniform4fPtr
      .asFunction<void Function(int, double, double, double, double)>();

  void glUniform4fv(
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniform4fv(
      location,
      count,
      value,
    );
  }

  late final _glUniform4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLfloat>)>>('glUniform4fv');
  late final _glUniform4fv = _glUniform4fvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glUniform4i(
    int location,
    int v0,
    int v1,
    int v2,
    int v3,
  ) {
    return _glUniform4i(
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  late final _glUniform4iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLint, GLint, GLint, GLint)>>('glUniform4i');
  late final _glUniform4i =
      _glUniform4iPtr.asFunction<void Function(int, int, int, int, int)>();

  void glUniform4iv(
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glUniform4iv(
      location,
      count,
      value,
    );
  }

  late final _glUniform4ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLint>)>>('glUniform4iv');
  late final _glUniform4iv = _glUniform4ivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glUniformMatrix2fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix2fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix2fv');
  late final _glUniformMatrix2fv = _glUniformMatrix2fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix3fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix3fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix3fv');
  late final _glUniformMatrix3fv = _glUniformMatrix3fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix4fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix4fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix4fv');
  late final _glUniformMatrix4fv = _glUniformMatrix4fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUseProgram(
    int program,
  ) {
    return _glUseProgram(
      program,
    );
  }

  late final _glUseProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>('glUseProgram');
  late final _glUseProgram = _glUseProgramPtr.asFunction<void Function(int)>();

  void glValidateProgram(
    int program,
  ) {
    return _glValidateProgram(
      program,
    );
  }

  late final _glValidateProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>(
          'glValidateProgram');
  late final _glValidateProgram =
      _glValidateProgramPtr.asFunction<void Function(int)>();

  void glVertexAttrib1f(
    int index,
    double x,
  ) {
    return _glVertexAttrib1f(
      index,
      x,
    );
  }

  late final _glVertexAttrib1fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLfloat)>>(
          'glVertexAttrib1f');
  late final _glVertexAttrib1f =
      _glVertexAttrib1fPtr.asFunction<void Function(int, double)>();

  void glVertexAttrib1fv(
    int index,
    ffi.Pointer<GLfloat> v,
  ) {
    return _glVertexAttrib1fv(
      index,
      v,
    );
  }

  late final _glVertexAttrib1fvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, ffi.Pointer<GLfloat>)>>(
      'glVertexAttrib1fv');
  late final _glVertexAttrib1fv = _glVertexAttrib1fvPtr
      .asFunction<void Function(int, ffi.Pointer<GLfloat>)>();

  void glVertexAttrib2f(
    int index,
    double x,
    double y,
  ) {
    return _glVertexAttrib2f(
      index,
      x,
      y,
    );
  }

  late final _glVertexAttrib2fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLfloat, GLfloat)>>(
          'glVertexAttrib2f');
  late final _glVertexAttrib2f =
      _glVertexAttrib2fPtr.asFunction<void Function(int, double, double)>();

  void glVertexAttrib2fv(
    int index,
    ffi.Pointer<GLfloat> v,
  ) {
    return _glVertexAttrib2fv(
      index,
      v,
    );
  }

  late final _glVertexAttrib2fvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, ffi.Pointer<GLfloat>)>>(
      'glVertexAttrib2fv');
  late final _glVertexAttrib2fv = _glVertexAttrib2fvPtr
      .asFunction<void Function(int, ffi.Pointer<GLfloat>)>();

  void glVertexAttrib3f(
    int index,
    double x,
    double y,
    double z,
  ) {
    return _glVertexAttrib3f(
      index,
      x,
      y,
      z,
    );
  }

  late final _glVertexAttrib3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLfloat, GLfloat, GLfloat)>>('glVertexAttrib3f');
  late final _glVertexAttrib3f = _glVertexAttrib3fPtr
      .asFunction<void Function(int, double, double, double)>();

  void glVertexAttrib3fv(
    int index,
    ffi.Pointer<GLfloat> v,
  ) {
    return _glVertexAttrib3fv(
      index,
      v,
    );
  }

  late final _glVertexAttrib3fvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, ffi.Pointer<GLfloat>)>>(
      'glVertexAttrib3fv');
  late final _glVertexAttrib3fv = _glVertexAttrib3fvPtr
      .asFunction<void Function(int, ffi.Pointer<GLfloat>)>();

  void glVertexAttrib4f(
    int index,
    double x,
    double y,
    double z,
    double w,
  ) {
    return _glVertexAttrib4f(
      index,
      x,
      y,
      z,
      w,
    );
  }

  late final _glVertexAttrib4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLfloat, GLfloat, GLfloat, GLfloat)>>('glVertexAttrib4f');
  late final _glVertexAttrib4f = _glVertexAttrib4fPtr
      .asFunction<void Function(int, double, double, double, double)>();

  void glVertexAttrib4fv(
    int index,
    ffi.Pointer<GLfloat> v,
  ) {
    return _glVertexAttrib4fv(
      index,
      v,
    );
  }

  late final _glVertexAttrib4fvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, ffi.Pointer<GLfloat>)>>(
      'glVertexAttrib4fv');
  late final _glVertexAttrib4fv = _glVertexAttrib4fvPtr
      .asFunction<void Function(int, ffi.Pointer<GLfloat>)>();

  void glVertexAttribPointer(
    int index,
    int size,
    int type,
    int normalized,
    int stride,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return _glVertexAttribPointer(
      index,
      size,
      type,
      normalized,
      stride,
      pointer,
    );
  }

  late final _glVertexAttribPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLenum, GLboolean, GLsizei,
              ffi.Pointer<ffi.Void>)>>('glVertexAttribPointer');
  late final _glVertexAttribPointer = _glVertexAttribPointerPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glViewport(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _glViewport(
      x,
      y,
      width,
      height,
    );
  }

  late final _glViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLint, GLsizei, GLsizei)>>('glViewport');
  late final _glViewport =
      _glViewportPtr.asFunction<void Function(int, int, int, int)>();

  void glReadBuffer(
    int src,
  ) {
    return _glReadBuffer(
      src,
    );
  }

  late final _glReadBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glReadBuffer');
  late final _glReadBuffer = _glReadBufferPtr.asFunction<void Function(int)>();

  void glDrawRangeElements(
    int mode,
    int start,
    int end,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
  ) {
    return _glDrawRangeElements(
      mode,
      start,
      end,
      count,
      type,
      indices,
    );
  }

  late final _glDrawRangeElementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLuint, GLuint, GLsizei, GLenum,
              ffi.Pointer<ffi.Void>)>>('glDrawRangeElements');
  late final _glDrawRangeElements = _glDrawRangeElementsPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glTexImage3D(
    int target,
    int level,
    int internalformat,
    int width,
    int height,
    int depth,
    int border,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _glTexImage3D(
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      pixels,
    );
  }

  late final _glTexImage3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei,
              GLint, GLenum, GLenum, ffi.Pointer<ffi.Void>)>>('glTexImage3D');
  late final _glTexImage3D = _glTexImage3DPtr.asFunction<
      void Function(int, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  void glTexSubImage3D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int zoffset,
    int width,
    int height,
    int depth,
    int format,
    int type,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _glTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      pixels,
    );
  }

  late final _glTexSubImage3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum,
              GLint,
              GLint,
              GLint,
              GLint,
              GLsizei,
              GLsizei,
              GLsizei,
              GLenum,
              GLenum,
              ffi.Pointer<ffi.Void>)>>('glTexSubImage3D');
  late final _glTexSubImage3D = _glTexSubImage3DPtr.asFunction<
      void Function(int, int, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  void glCopyTexSubImage3D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int zoffset,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _glCopyTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      x,
      y,
      width,
      height,
    );
  }

  late final _glCopyTexSubImage3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLint, GLint, GLint, GLint, GLint,
              GLsizei, GLsizei)>>('glCopyTexSubImage3D');
  late final _glCopyTexSubImage3D = _glCopyTexSubImage3DPtr
      .asFunction<void Function(int, int, int, int, int, int, int, int, int)>();

  void glCompressedTexImage3D(
    int target,
    int level,
    int internalformat,
    int width,
    int height,
    int depth,
    int border,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _glCompressedTexImage3D(
      target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      imageSize,
      data,
    );
  }

  late final _glCompressedTexImage3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum,
              GLint,
              GLenum,
              GLsizei,
              GLsizei,
              GLsizei,
              GLint,
              GLsizei,
              ffi.Pointer<ffi.Void>)>>('glCompressedTexImage3D');
  late final _glCompressedTexImage3D = _glCompressedTexImage3DPtr.asFunction<
      void Function(
          int, int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glCompressedTexSubImage3D(
    int target,
    int level,
    int xoffset,
    int yoffset,
    int zoffset,
    int width,
    int height,
    int depth,
    int format,
    int imageSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _glCompressedTexSubImage3D(
      target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      imageSize,
      data,
    );
  }

  late final _glCompressedTexSubImage3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum,
              GLint,
              GLint,
              GLint,
              GLint,
              GLsizei,
              GLsizei,
              GLsizei,
              GLenum,
              GLsizei,
              ffi.Pointer<ffi.Void>)>>('glCompressedTexSubImage3D');
  late final _glCompressedTexSubImage3D =
      _glCompressedTexSubImage3DPtr.asFunction<
          void Function(int, int, int, int, int, int, int, int, int, int,
              ffi.Pointer<ffi.Void>)>();

  void glGenQueries(
    int n,
    ffi.Pointer<GLuint> ids,
  ) {
    return _glGenQueries(
      n,
      ids,
    );
  }

  late final _glGenQueriesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenQueries');
  late final _glGenQueries =
      _glGenQueriesPtr.asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glDeleteQueries(
    int n,
    ffi.Pointer<GLuint> ids,
  ) {
    return _glDeleteQueries(
      n,
      ids,
    );
  }

  late final _glDeleteQueriesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteQueries');
  late final _glDeleteQueries =
      _glDeleteQueriesPtr.asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  int glIsQuery(
    int id,
  ) {
    return _glIsQuery(
      id,
    );
  }

  late final _glIsQueryPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>('glIsQuery');
  late final _glIsQuery = _glIsQueryPtr.asFunction<int Function(int)>();

  void glBeginQuery(
    int target,
    int id,
  ) {
    return _glBeginQuery(
      target,
      id,
    );
  }

  late final _glBeginQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glBeginQuery');
  late final _glBeginQuery =
      _glBeginQueryPtr.asFunction<void Function(int, int)>();

  void glEndQuery(
    int target,
  ) {
    return _glEndQuery(
      target,
    );
  }

  late final _glEndQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>('glEndQuery');
  late final _glEndQuery = _glEndQueryPtr.asFunction<void Function(int)>();

  void glGetQueryiv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetQueryiv(
      target,
      pname,
      params,
    );
  }

  late final _glGetQueryivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLint>)>>('glGetQueryiv');
  late final _glGetQueryiv = _glGetQueryivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetQueryObjectuiv(
    int id,
    int pname,
    ffi.Pointer<GLuint> params,
  ) {
    return _glGetQueryObjectuiv(
      id,
      pname,
      params,
    );
  }

  late final _glGetQueryObjectuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLuint>)>>('glGetQueryObjectuiv');
  late final _glGetQueryObjectuiv = _glGetQueryObjectuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  int glUnmapBuffer(
    int target,
  ) {
    return _glUnmapBuffer(
      target,
    );
  }

  late final _glUnmapBufferPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLenum)>>('glUnmapBuffer');
  late final _glUnmapBuffer = _glUnmapBufferPtr.asFunction<int Function(int)>();

  void glGetBufferPointerv(
    int target,
    int pname,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params,
  ) {
    return _glGetBufferPointerv(
      target,
      pname,
      params,
    );
  }

  late final _glGetBufferPointervPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('glGetBufferPointerv');
  late final _glGetBufferPointerv = _glGetBufferPointervPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void glDrawBuffers(
    int n,
    ffi.Pointer<GLenum> bufs,
  ) {
    return _glDrawBuffers(
      n,
      bufs,
    );
  }

  late final _glDrawBuffersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLenum>)>>(
      'glDrawBuffers');
  late final _glDrawBuffers =
      _glDrawBuffersPtr.asFunction<void Function(int, ffi.Pointer<GLenum>)>();

  void glUniformMatrix2x3fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix2x3fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix2x3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix2x3fv');
  late final _glUniformMatrix2x3fv = _glUniformMatrix2x3fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix3x2fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix3x2fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix3x2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix3x2fv');
  late final _glUniformMatrix3x2fv = _glUniformMatrix3x2fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix2x4fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix2x4fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix2x4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix2x4fv');
  late final _glUniformMatrix2x4fv = _glUniformMatrix2x4fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix4x2fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix4x2fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix4x2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix4x2fv');
  late final _glUniformMatrix4x2fv = _glUniformMatrix4x2fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix3x4fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix3x4fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix3x4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix3x4fv');
  late final _glUniformMatrix3x4fv = _glUniformMatrix3x4fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glUniformMatrix4x3fv(
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glUniformMatrix4x3fv(
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glUniformMatrix4x3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glUniformMatrix4x3fv');
  late final _glUniformMatrix4x3fv = _glUniformMatrix4x3fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glBlitFramebuffer(
    int srcX0,
    int srcY0,
    int srcX1,
    int srcY1,
    int dstX0,
    int dstY0,
    int dstX1,
    int dstY1,
    int mask,
    int filter,
  ) {
    return _glBlitFramebuffer(
      srcX0,
      srcY0,
      srcX1,
      srcY1,
      dstX0,
      dstY0,
      dstX1,
      dstY1,
      mask,
      filter,
    );
  }

  late final _glBlitFramebufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLint, GLint, GLint, GLint, GLint, GLint,
              GLint, GLbitfield, GLenum)>>('glBlitFramebuffer');
  late final _glBlitFramebuffer = _glBlitFramebufferPtr.asFunction<
      void Function(int, int, int, int, int, int, int, int, int, int)>();

  void glRenderbufferStorageMultisample(
    int target,
    int samples,
    int internalformat,
    int width,
    int height,
  ) {
    return _glRenderbufferStorageMultisample(
      target,
      samples,
      internalformat,
      width,
      height,
    );
  }

  late final _glRenderbufferStorageMultisamplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, GLsizei,
              GLsizei)>>('glRenderbufferStorageMultisample');
  late final _glRenderbufferStorageMultisample =
      _glRenderbufferStorageMultisamplePtr
          .asFunction<void Function(int, int, int, int, int)>();

  void glFramebufferTextureLayer(
    int target,
    int attachment,
    int texture,
    int level,
    int layer,
  ) {
    return _glFramebufferTextureLayer(
      target,
      attachment,
      texture,
      level,
      layer,
    );
  }

  late final _glFramebufferTextureLayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLuint, GLint,
              GLint)>>('glFramebufferTextureLayer');
  late final _glFramebufferTextureLayer = _glFramebufferTextureLayerPtr
      .asFunction<void Function(int, int, int, int, int)>();

  ffi.Pointer<ffi.Void> glMapBufferRange(
    int target,
    int offset,
    int length,
    int access,
  ) {
    return _glMapBufferRange(
      target,
      offset,
      length,
      access,
    );
  }

  late final _glMapBufferRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              GLenum, GLintptr, GLsizeiptr, GLbitfield)>>('glMapBufferRange');
  late final _glMapBufferRange = _glMapBufferRangePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int, int)>();

  void glFlushMappedBufferRange(
    int target,
    int offset,
    int length,
  ) {
    return _glFlushMappedBufferRange(
      target,
      offset,
      length,
    );
  }

  late final _glFlushMappedBufferRangePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, GLintptr, GLsizeiptr)>>(
      'glFlushMappedBufferRange');
  late final _glFlushMappedBufferRange =
      _glFlushMappedBufferRangePtr.asFunction<void Function(int, int, int)>();

  void glBindVertexArray(
    int array,
  ) {
    return _glBindVertexArray(
      array,
    );
  }

  late final _glBindVertexArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>(
          'glBindVertexArray');
  late final _glBindVertexArray =
      _glBindVertexArrayPtr.asFunction<void Function(int)>();

  void glDeleteVertexArrays(
    int n,
    ffi.Pointer<GLuint> arrays,
  ) {
    return _glDeleteVertexArrays(
      n,
      arrays,
    );
  }

  late final _glDeleteVertexArraysPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteVertexArrays');
  late final _glDeleteVertexArrays = _glDeleteVertexArraysPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGenVertexArrays(
    int n,
    ffi.Pointer<GLuint> arrays,
  ) {
    return _glGenVertexArrays(
      n,
      arrays,
    );
  }

  late final _glGenVertexArraysPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenVertexArrays');
  late final _glGenVertexArrays = _glGenVertexArraysPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  int glIsVertexArray(
    int array,
  ) {
    return _glIsVertexArray(
      array,
    );
  }

  late final _glIsVertexArrayPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>(
          'glIsVertexArray');
  late final _glIsVertexArray =
      _glIsVertexArrayPtr.asFunction<int Function(int)>();

  void glGetIntegeri_v(
    int target,
    int index,
    ffi.Pointer<GLint> data,
  ) {
    return _glGetIntegeri_v(
      target,
      index,
      data,
    );
  }

  late final _glGetIntegeri_vPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLuint, ffi.Pointer<GLint>)>>('glGetIntegeri_v');
  late final _glGetIntegeri_v = _glGetIntegeri_vPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glBeginTransformFeedback(
    int primitiveMode,
  ) {
    return _glBeginTransformFeedback(
      primitiveMode,
    );
  }

  late final _glBeginTransformFeedbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum)>>(
          'glBeginTransformFeedback');
  late final _glBeginTransformFeedback =
      _glBeginTransformFeedbackPtr.asFunction<void Function(int)>();

  void glEndTransformFeedback() {
    return _glEndTransformFeedback();
  }

  late final _glEndTransformFeedbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'glEndTransformFeedback');
  late final _glEndTransformFeedback =
      _glEndTransformFeedbackPtr.asFunction<void Function()>();

  void glBindBufferRange(
    int target,
    int index,
    int buffer,
    int offset,
    int size,
  ) {
    return _glBindBufferRange(
      target,
      index,
      buffer,
      offset,
      size,
    );
  }

  late final _glBindBufferRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLuint, GLuint, GLintptr,
              GLsizeiptr)>>('glBindBufferRange');
  late final _glBindBufferRange = _glBindBufferRangePtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glBindBufferBase(
    int target,
    int index,
    int buffer,
  ) {
    return _glBindBufferBase(
      target,
      index,
      buffer,
    );
  }

  late final _glBindBufferBasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint, GLuint)>>(
          'glBindBufferBase');
  late final _glBindBufferBase =
      _glBindBufferBasePtr.asFunction<void Function(int, int, int)>();

  void glTransformFeedbackVaryings(
    int program,
    int count,
    ffi.Pointer<ffi.Pointer<GLchar>> varyings,
    int bufferMode,
  ) {
    return _glTransformFeedbackVaryings(
      program,
      count,
      varyings,
      bufferMode,
    );
  }

  late final _glTransformFeedbackVaryingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<ffi.Pointer<GLchar>>,
              GLenum)>>('glTransformFeedbackVaryings');
  late final _glTransformFeedbackVaryings =
      _glTransformFeedbackVaryingsPtr.asFunction<
          void Function(int, int, ffi.Pointer<ffi.Pointer<GLchar>>, int)>();

  void glGetTransformFeedbackVarying(
    int program,
    int index,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLsizei> size,
    ffi.Pointer<GLenum> type,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetTransformFeedbackVarying(
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    );
  }

  late final _glGetTransformFeedbackVaryingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLuint,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLchar>)>>('glGetTransformFeedbackVarying');
  late final _glGetTransformFeedbackVarying =
      _glGetTransformFeedbackVaryingPtr.asFunction<
          void Function(
              int,
              int,
              int,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLchar>)>();

  void glVertexAttribIPointer(
    int index,
    int size,
    int type,
    int stride,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return _glVertexAttribIPointer(
      index,
      size,
      type,
      stride,
      pointer,
    );
  }

  late final _glVertexAttribIPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLenum, GLsizei,
              ffi.Pointer<ffi.Void>)>>('glVertexAttribIPointer');
  late final _glVertexAttribIPointer = _glVertexAttribIPointerPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glGetVertexAttribIiv(
    int index,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetVertexAttribIiv(
      index,
      pname,
      params,
    );
  }

  late final _glGetVertexAttribIivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetVertexAttribIiv');
  late final _glGetVertexAttribIiv = _glGetVertexAttribIivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetVertexAttribIuiv(
    int index,
    int pname,
    ffi.Pointer<GLuint> params,
  ) {
    return _glGetVertexAttribIuiv(
      index,
      pname,
      params,
    );
  }

  late final _glGetVertexAttribIuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLuint>)>>('glGetVertexAttribIuiv');
  late final _glGetVertexAttribIuiv = _glGetVertexAttribIuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glVertexAttribI4i(
    int index,
    int x,
    int y,
    int z,
    int w,
  ) {
    return _glVertexAttribI4i(
      index,
      x,
      y,
      z,
      w,
    );
  }

  late final _glVertexAttribI4iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, GLint, GLint, GLint)>>('glVertexAttribI4i');
  late final _glVertexAttribI4i = _glVertexAttribI4iPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glVertexAttribI4ui(
    int index,
    int x,
    int y,
    int z,
    int w,
  ) {
    return _glVertexAttribI4ui(
      index,
      x,
      y,
      z,
      w,
    );
  }

  late final _glVertexAttribI4uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLuint, GLuint, GLuint, GLuint)>>('glVertexAttribI4ui');
  late final _glVertexAttribI4ui = _glVertexAttribI4uiPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glVertexAttribI4iv(
    int index,
    ffi.Pointer<GLint> v,
  ) {
    return _glVertexAttribI4iv(
      index,
      v,
    );
  }

  late final _glVertexAttribI4ivPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, ffi.Pointer<GLint>)>>(
      'glVertexAttribI4iv');
  late final _glVertexAttribI4iv = _glVertexAttribI4ivPtr
      .asFunction<void Function(int, ffi.Pointer<GLint>)>();

  void glVertexAttribI4uiv(
    int index,
    ffi.Pointer<GLuint> v,
  ) {
    return _glVertexAttribI4uiv(
      index,
      v,
    );
  }

  late final _glVertexAttribI4uivPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, ffi.Pointer<GLuint>)>>(
      'glVertexAttribI4uiv');
  late final _glVertexAttribI4uiv = _glVertexAttribI4uivPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGetUniformuiv(
    int program,
    int location,
    ffi.Pointer<GLuint> params,
  ) {
    return _glGetUniformuiv(
      program,
      location,
      params,
    );
  }

  late final _glGetUniformuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, ffi.Pointer<GLuint>)>>('glGetUniformuiv');
  late final _glGetUniformuiv = _glGetUniformuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  int glGetFragDataLocation(
    int program,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetFragDataLocation(
      program,
      name,
    );
  }

  late final _glGetFragDataLocationPtr =
      _lookup<ffi.NativeFunction<GLint Function(GLuint, ffi.Pointer<GLchar>)>>(
          'glGetFragDataLocation');
  late final _glGetFragDataLocation = _glGetFragDataLocationPtr
      .asFunction<int Function(int, ffi.Pointer<GLchar>)>();

  void glUniform1ui(
    int location,
    int v0,
  ) {
    return _glUniform1ui(
      location,
      v0,
    );
  }

  late final _glUniform1uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint, GLuint)>>(
          'glUniform1ui');
  late final _glUniform1ui =
      _glUniform1uiPtr.asFunction<void Function(int, int)>();

  void glUniform2ui(
    int location,
    int v0,
    int v1,
  ) {
    return _glUniform2ui(
      location,
      v0,
      v1,
    );
  }

  late final _glUniform2uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLint, GLuint, GLuint)>>(
          'glUniform2ui');
  late final _glUniform2ui =
      _glUniform2uiPtr.asFunction<void Function(int, int, int)>();

  void glUniform3ui(
    int location,
    int v0,
    int v1,
    int v2,
  ) {
    return _glUniform3ui(
      location,
      v0,
      v1,
      v2,
    );
  }

  late final _glUniform3uiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLint, GLuint, GLuint, GLuint)>>(
      'glUniform3ui');
  late final _glUniform3ui =
      _glUniform3uiPtr.asFunction<void Function(int, int, int, int)>();

  void glUniform4ui(
    int location,
    int v0,
    int v1,
    int v2,
    int v3,
  ) {
    return _glUniform4ui(
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  late final _glUniform4uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLuint, GLuint, GLuint, GLuint)>>('glUniform4ui');
  late final _glUniform4ui =
      _glUniform4uiPtr.asFunction<void Function(int, int, int, int, int)>();

  void glUniform1uiv(
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glUniform1uiv(
      location,
      count,
      value,
    );
  }

  late final _glUniform1uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLuint>)>>('glUniform1uiv');
  late final _glUniform1uiv = _glUniform1uivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glUniform2uiv(
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glUniform2uiv(
      location,
      count,
      value,
    );
  }

  late final _glUniform2uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLuint>)>>('glUniform2uiv');
  late final _glUniform2uiv = _glUniform2uivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glUniform3uiv(
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glUniform3uiv(
      location,
      count,
      value,
    );
  }

  late final _glUniform3uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLuint>)>>('glUniform3uiv');
  late final _glUniform3uiv = _glUniform3uivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glUniform4uiv(
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glUniform4uiv(
      location,
      count,
      value,
    );
  }

  late final _glUniform4uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLint, GLsizei, ffi.Pointer<GLuint>)>>('glUniform4uiv');
  late final _glUniform4uiv = _glUniform4uivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glClearBufferiv(
    int buffer,
    int drawbuffer,
    ffi.Pointer<GLint> value,
  ) {
    return _glClearBufferiv(
      buffer,
      drawbuffer,
      value,
    );
  }

  late final _glClearBufferivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLint, ffi.Pointer<GLint>)>>('glClearBufferiv');
  late final _glClearBufferiv = _glClearBufferivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glClearBufferuiv(
    int buffer,
    int drawbuffer,
    ffi.Pointer<GLuint> value,
  ) {
    return _glClearBufferuiv(
      buffer,
      drawbuffer,
      value,
    );
  }

  late final _glClearBufferuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLint, ffi.Pointer<GLuint>)>>('glClearBufferuiv');
  late final _glClearBufferuiv = _glClearBufferuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glClearBufferfv(
    int buffer,
    int drawbuffer,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glClearBufferfv(
      buffer,
      drawbuffer,
      value,
    );
  }

  late final _glClearBufferfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLint, ffi.Pointer<GLfloat>)>>('glClearBufferfv');
  late final _glClearBufferfv = _glClearBufferfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glClearBufferfi(
    int buffer,
    int drawbuffer,
    double depth,
    int stencil,
  ) {
    return _glClearBufferfi(
      buffer,
      drawbuffer,
      depth,
      stencil,
    );
  }

  late final _glClearBufferfiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, GLint, GLfloat, GLint)>>(
      'glClearBufferfi');
  late final _glClearBufferfi =
      _glClearBufferfiPtr.asFunction<void Function(int, int, double, int)>();

  ffi.Pointer<GLubyte> glGetStringi(
    int name,
    int index,
  ) {
    return _glGetStringi(
      name,
      index,
    );
  }

  late final _glGetStringiPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GLubyte> Function(GLenum, GLuint)>>(
      'glGetStringi');
  late final _glGetStringi =
      _glGetStringiPtr.asFunction<ffi.Pointer<GLubyte> Function(int, int)>();

  void glCopyBufferSubData(
    int readTarget,
    int writeTarget,
    int readOffset,
    int writeOffset,
    int size,
  ) {
    return _glCopyBufferSubData(
      readTarget,
      writeTarget,
      readOffset,
      writeOffset,
      size,
    );
  }

  late final _glCopyBufferSubDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLintptr, GLintptr,
              GLsizeiptr)>>('glCopyBufferSubData');
  late final _glCopyBufferSubData = _glCopyBufferSubDataPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glGetUniformIndices(
    int program,
    int uniformCount,
    ffi.Pointer<ffi.Pointer<GLchar>> uniformNames,
    ffi.Pointer<GLuint> uniformIndices,
  ) {
    return _glGetUniformIndices(
      program,
      uniformCount,
      uniformNames,
      uniformIndices,
    );
  }

  late final _glGetUniformIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<ffi.Pointer<GLchar>>,
              ffi.Pointer<GLuint>)>>('glGetUniformIndices');
  late final _glGetUniformIndices = _glGetUniformIndicesPtr.asFunction<
      void Function(
          int, int, ffi.Pointer<ffi.Pointer<GLchar>>, ffi.Pointer<GLuint>)>();

  void glGetActiveUniformsiv(
    int program,
    int uniformCount,
    ffi.Pointer<GLuint> uniformIndices,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetActiveUniformsiv(
      program,
      uniformCount,
      uniformIndices,
      pname,
      params,
    );
  }

  late final _glGetActiveUniformsivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<GLuint>, GLenum,
              ffi.Pointer<GLint>)>>('glGetActiveUniformsiv');
  late final _glGetActiveUniformsiv = _glGetActiveUniformsivPtr.asFunction<
      void Function(int, int, ffi.Pointer<GLuint>, int, ffi.Pointer<GLint>)>();

  int glGetUniformBlockIndex(
    int program,
    ffi.Pointer<GLchar> uniformBlockName,
  ) {
    return _glGetUniformBlockIndex(
      program,
      uniformBlockName,
    );
  }

  late final _glGetUniformBlockIndexPtr =
      _lookup<ffi.NativeFunction<GLuint Function(GLuint, ffi.Pointer<GLchar>)>>(
          'glGetUniformBlockIndex');
  late final _glGetUniformBlockIndex = _glGetUniformBlockIndexPtr
      .asFunction<int Function(int, ffi.Pointer<GLchar>)>();

  void glGetActiveUniformBlockiv(
    int program,
    int uniformBlockIndex,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetActiveUniformBlockiv(
      program,
      uniformBlockIndex,
      pname,
      params,
    );
  }

  late final _glGetActiveUniformBlockivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLuint, GLenum,
              ffi.Pointer<GLint>)>>('glGetActiveUniformBlockiv');
  late final _glGetActiveUniformBlockiv = _glGetActiveUniformBlockivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glGetActiveUniformBlockName(
    int program,
    int uniformBlockIndex,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> uniformBlockName,
  ) {
    return _glGetActiveUniformBlockName(
      program,
      uniformBlockIndex,
      bufSize,
      length,
      uniformBlockName,
    );
  }

  late final _glGetActiveUniformBlockNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetActiveUniformBlockName');
  late final _glGetActiveUniformBlockName =
      _glGetActiveUniformBlockNamePtr.asFunction<
          void Function(
              int, int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  void glUniformBlockBinding(
    int program,
    int uniformBlockIndex,
    int uniformBlockBinding,
  ) {
    return _glUniformBlockBinding(
      program,
      uniformBlockIndex,
      uniformBlockBinding,
    );
  }

  late final _glUniformBlockBindingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint, GLuint)>>(
          'glUniformBlockBinding');
  late final _glUniformBlockBinding =
      _glUniformBlockBindingPtr.asFunction<void Function(int, int, int)>();

  void glDrawArraysInstanced(
    int mode,
    int first,
    int count,
    int instancecount,
  ) {
    return _glDrawArraysInstanced(
      mode,
      first,
      count,
      instancecount,
    );
  }

  late final _glDrawArraysInstancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLint, GLsizei, GLsizei)>>('glDrawArraysInstanced');
  late final _glDrawArraysInstanced =
      _glDrawArraysInstancedPtr.asFunction<void Function(int, int, int, int)>();

  void glDrawElementsInstanced(
    int mode,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
    int instancecount,
  ) {
    return _glDrawElementsInstanced(
      mode,
      count,
      type,
      indices,
      instancecount,
    );
  }

  late final _glDrawElementsInstancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, ffi.Pointer<ffi.Void>,
              GLsizei)>>('glDrawElementsInstanced');
  late final _glDrawElementsInstanced = _glDrawElementsInstancedPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  GLsync glFenceSync(
    int condition,
    int flags,
  ) {
    return _glFenceSync(
      condition,
      flags,
    );
  }

  late final _glFenceSyncPtr =
      _lookup<ffi.NativeFunction<GLsync Function(GLenum, GLbitfield)>>(
          'glFenceSync');
  late final _glFenceSync =
      _glFenceSyncPtr.asFunction<GLsync Function(int, int)>();

  int glIsSync(
    GLsync sync1,
  ) {
    return _glIsSync(
      sync1,
    );
  }

  late final _glIsSyncPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLsync)>>('glIsSync');
  late final _glIsSync = _glIsSyncPtr.asFunction<int Function(GLsync)>();

  void glDeleteSync(
    GLsync sync1,
  ) {
    return _glDeleteSync(
      sync1,
    );
  }

  late final _glDeleteSyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLsync)>>('glDeleteSync');
  late final _glDeleteSync =
      _glDeleteSyncPtr.asFunction<void Function(GLsync)>();

  int glClientWaitSync(
    GLsync sync1,
    int flags,
    int timeout,
  ) {
    return _glClientWaitSync(
      sync1,
      flags,
      timeout,
    );
  }

  late final _glClientWaitSyncPtr = _lookup<
          ffi.NativeFunction<GLenum Function(GLsync, GLbitfield, GLuint64)>>(
      'glClientWaitSync');
  late final _glClientWaitSync =
      _glClientWaitSyncPtr.asFunction<int Function(GLsync, int, int)>();

  void glWaitSync(
    GLsync sync1,
    int flags,
    int timeout,
  ) {
    return _glWaitSync(
      sync1,
      flags,
      timeout,
    );
  }

  late final _glWaitSyncPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsync, GLbitfield, GLuint64)>>(
      'glWaitSync');
  late final _glWaitSync =
      _glWaitSyncPtr.asFunction<void Function(GLsync, int, int)>();

  void glGetInteger64v(
    int pname,
    ffi.Pointer<GLint64> data,
  ) {
    return _glGetInteger64v(
      pname,
      data,
    );
  }

  late final _glGetInteger64vPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, ffi.Pointer<GLint64>)>>(
      'glGetInteger64v');
  late final _glGetInteger64v = _glGetInteger64vPtr
      .asFunction<void Function(int, ffi.Pointer<GLint64>)>();

  void glGetSynciv(
    GLsync sync1,
    int pname,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLint> values,
  ) {
    return _glGetSynciv(
      sync1,
      pname,
      bufSize,
      length,
      values,
    );
  }

  late final _glGetSyncivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLsync, GLenum, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLint>)>>('glGetSynciv');
  late final _glGetSynciv = _glGetSyncivPtr.asFunction<
      void Function(
          GLsync, int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLint>)>();

  void glGetInteger64i_v(
    int target,
    int index,
    ffi.Pointer<GLint64> data,
  ) {
    return _glGetInteger64i_v(
      target,
      index,
      data,
    );
  }

  late final _glGetInteger64i_vPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLuint, ffi.Pointer<GLint64>)>>('glGetInteger64i_v');
  late final _glGetInteger64i_v = _glGetInteger64i_vPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint64>)>();

  void glGetBufferParameteri64v(
    int target,
    int pname,
    ffi.Pointer<GLint64> params,
  ) {
    return _glGetBufferParameteri64v(
      target,
      pname,
      params,
    );
  }

  late final _glGetBufferParameteri64vPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum,
              ffi.Pointer<GLint64>)>>('glGetBufferParameteri64v');
  late final _glGetBufferParameteri64v = _glGetBufferParameteri64vPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint64>)>();

  void glGenSamplers(
    int count,
    ffi.Pointer<GLuint> samplers,
  ) {
    return _glGenSamplers(
      count,
      samplers,
    );
  }

  late final _glGenSamplersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenSamplers');
  late final _glGenSamplers =
      _glGenSamplersPtr.asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glDeleteSamplers(
    int count,
    ffi.Pointer<GLuint> samplers,
  ) {
    return _glDeleteSamplers(
      count,
      samplers,
    );
  }

  late final _glDeleteSamplersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteSamplers');
  late final _glDeleteSamplers = _glDeleteSamplersPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  int glIsSampler(
    int sampler,
  ) {
    return _glIsSampler(
      sampler,
    );
  }

  late final _glIsSamplerPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>('glIsSampler');
  late final _glIsSampler = _glIsSamplerPtr.asFunction<int Function(int)>();

  void glBindSampler(
    int unit,
    int sampler,
  ) {
    return _glBindSampler(
      unit,
      sampler,
    );
  }

  late final _glBindSamplerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glBindSampler');
  late final _glBindSampler =
      _glBindSamplerPtr.asFunction<void Function(int, int)>();

  void glSamplerParameteri(
    int sampler,
    int pname,
    int param,
  ) {
    return _glSamplerParameteri(
      sampler,
      pname,
      param,
    );
  }

  late final _glSamplerParameteriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLenum, GLint)>>(
          'glSamplerParameteri');
  late final _glSamplerParameteri =
      _glSamplerParameteriPtr.asFunction<void Function(int, int, int)>();

  void glSamplerParameteriv(
    int sampler,
    int pname,
    ffi.Pointer<GLint> param,
  ) {
    return _glSamplerParameteriv(
      sampler,
      pname,
      param,
    );
  }

  late final _glSamplerParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glSamplerParameteriv');
  late final _glSamplerParameteriv = _glSamplerParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glSamplerParameterf(
    int sampler,
    int pname,
    double param,
  ) {
    return _glSamplerParameterf(
      sampler,
      pname,
      param,
    );
  }

  late final _glSamplerParameterfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLenum, GLfloat)>>(
          'glSamplerParameterf');
  late final _glSamplerParameterf =
      _glSamplerParameterfPtr.asFunction<void Function(int, int, double)>();

  void glSamplerParameterfv(
    int sampler,
    int pname,
    ffi.Pointer<GLfloat> param,
  ) {
    return _glSamplerParameterfv(
      sampler,
      pname,
      param,
    );
  }

  late final _glSamplerParameterfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLfloat>)>>('glSamplerParameterfv');
  late final _glSamplerParameterfv = _glSamplerParameterfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glGetSamplerParameteriv(
    int sampler,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetSamplerParameteriv(
      sampler,
      pname,
      params,
    );
  }

  late final _glGetSamplerParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetSamplerParameteriv');
  late final _glGetSamplerParameteriv = _glGetSamplerParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetSamplerParameterfv(
    int sampler,
    int pname,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glGetSamplerParameterfv(
      sampler,
      pname,
      params,
    );
  }

  late final _glGetSamplerParameterfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLenum,
              ffi.Pointer<GLfloat>)>>('glGetSamplerParameterfv');
  late final _glGetSamplerParameterfv = _glGetSamplerParameterfvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glVertexAttribDivisor(
    int index,
    int divisor,
  ) {
    return _glVertexAttribDivisor(
      index,
      divisor,
    );
  }

  late final _glVertexAttribDivisorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glVertexAttribDivisor');
  late final _glVertexAttribDivisor =
      _glVertexAttribDivisorPtr.asFunction<void Function(int, int)>();

  void glBindTransformFeedback(
    int target,
    int id,
  ) {
    return _glBindTransformFeedback(
      target,
      id,
    );
  }

  late final _glBindTransformFeedbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glBindTransformFeedback');
  late final _glBindTransformFeedback =
      _glBindTransformFeedbackPtr.asFunction<void Function(int, int)>();

  void glDeleteTransformFeedbacks(
    int n,
    ffi.Pointer<GLuint> ids,
  ) {
    return _glDeleteTransformFeedbacks(
      n,
      ids,
    );
  }

  late final _glDeleteTransformFeedbacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteTransformFeedbacks');
  late final _glDeleteTransformFeedbacks = _glDeleteTransformFeedbacksPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGenTransformFeedbacks(
    int n,
    ffi.Pointer<GLuint> ids,
  ) {
    return _glGenTransformFeedbacks(
      n,
      ids,
    );
  }

  late final _glGenTransformFeedbacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenTransformFeedbacks');
  late final _glGenTransformFeedbacks = _glGenTransformFeedbacksPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  int glIsTransformFeedback(
    int id,
  ) {
    return _glIsTransformFeedback(
      id,
    );
  }

  late final _glIsTransformFeedbackPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>(
          'glIsTransformFeedback');
  late final _glIsTransformFeedback =
      _glIsTransformFeedbackPtr.asFunction<int Function(int)>();

  void glPauseTransformFeedback() {
    return _glPauseTransformFeedback();
  }

  late final _glPauseTransformFeedbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'glPauseTransformFeedback');
  late final _glPauseTransformFeedback =
      _glPauseTransformFeedbackPtr.asFunction<void Function()>();

  void glResumeTransformFeedback() {
    return _glResumeTransformFeedback();
  }

  late final _glResumeTransformFeedbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'glResumeTransformFeedback');
  late final _glResumeTransformFeedback =
      _glResumeTransformFeedbackPtr.asFunction<void Function()>();

  void glGetProgramBinary(
    int program,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLenum> binaryFormat,
    ffi.Pointer<ffi.Void> binary,
  ) {
    return _glGetProgramBinary(
      program,
      bufSize,
      length,
      binaryFormat,
      binary,
    );
  }

  late final _glGetProgramBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<ffi.Void>)>>('glGetProgramBinary');
  late final _glGetProgramBinary = _glGetProgramBinaryPtr.asFunction<
      void Function(int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLenum>,
          ffi.Pointer<ffi.Void>)>();

  void glProgramBinary(
    int program,
    int binaryFormat,
    ffi.Pointer<ffi.Void> binary,
    int length,
  ) {
    return _glProgramBinary(
      program,
      binaryFormat,
      binary,
      length,
    );
  }

  late final _glProgramBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLenum, ffi.Pointer<ffi.Void>,
              GLsizei)>>('glProgramBinary');
  late final _glProgramBinary = _glProgramBinaryPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  void glProgramParameteri(
    int program,
    int pname,
    int value,
  ) {
    return _glProgramParameteri(
      program,
      pname,
      value,
    );
  }

  late final _glProgramParameteriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLenum, GLint)>>(
          'glProgramParameteri');
  late final _glProgramParameteri =
      _glProgramParameteriPtr.asFunction<void Function(int, int, int)>();

  void glInvalidateFramebuffer(
    int target,
    int numAttachments,
    ffi.Pointer<GLenum> attachments,
  ) {
    return _glInvalidateFramebuffer(
      target,
      numAttachments,
      attachments,
    );
  }

  late final _glInvalidateFramebufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei,
              ffi.Pointer<GLenum>)>>('glInvalidateFramebuffer');
  late final _glInvalidateFramebuffer = _glInvalidateFramebufferPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLenum>)>();

  void glInvalidateSubFramebuffer(
    int target,
    int numAttachments,
    ffi.Pointer<GLenum> attachments,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _glInvalidateSubFramebuffer(
      target,
      numAttachments,
      attachments,
      x,
      y,
      width,
      height,
    );
  }

  late final _glInvalidateSubFramebufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, ffi.Pointer<GLenum>, GLint, GLint,
              GLsizei, GLsizei)>>('glInvalidateSubFramebuffer');
  late final _glInvalidateSubFramebuffer =
      _glInvalidateSubFramebufferPtr.asFunction<
          void Function(int, int, ffi.Pointer<GLenum>, int, int, int, int)>();

  void glTexStorage2D(
    int target,
    int levels,
    int internalformat,
    int width,
    int height,
  ) {
    return _glTexStorage2D(
      target,
      levels,
      internalformat,
      width,
      height,
    );
  }

  late final _glTexStorage2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLsizei, GLenum, GLsizei, GLsizei)>>('glTexStorage2D');
  late final _glTexStorage2D =
      _glTexStorage2DPtr.asFunction<void Function(int, int, int, int, int)>();

  void glTexStorage3D(
    int target,
    int levels,
    int internalformat,
    int width,
    int height,
    int depth,
  ) {
    return _glTexStorage3D(
      target,
      levels,
      internalformat,
      width,
      height,
      depth,
    );
  }

  late final _glTexStorage3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, GLsizei, GLsizei,
              GLsizei)>>('glTexStorage3D');
  late final _glTexStorage3D = _glTexStorage3DPtr
      .asFunction<void Function(int, int, int, int, int, int)>();

  void glGetInternalformativ(
    int target,
    int internalformat,
    int pname,
    int bufSize,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetInternalformativ(
      target,
      internalformat,
      pname,
      bufSize,
      params,
    );
  }

  late final _glGetInternalformativPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLenum, GLsizei,
              ffi.Pointer<GLint>)>>('glGetInternalformativ');
  late final _glGetInternalformativ = _glGetInternalformativPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLint>)>();

  void glDispatchCompute(
    int num_groups_x,
    int num_groups_y,
    int num_groups_z,
  ) {
    return _glDispatchCompute(
      num_groups_x,
      num_groups_y,
      num_groups_z,
    );
  }

  late final _glDispatchComputePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint, GLuint)>>(
          'glDispatchCompute');
  late final _glDispatchCompute =
      _glDispatchComputePtr.asFunction<void Function(int, int, int)>();

  void glDispatchComputeIndirect(
    int indirect,
  ) {
    return _glDispatchComputeIndirect(
      indirect,
    );
  }

  late final _glDispatchComputeIndirectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLintptr)>>(
          'glDispatchComputeIndirect');
  late final _glDispatchComputeIndirect =
      _glDispatchComputeIndirectPtr.asFunction<void Function(int)>();

  void glDrawArraysIndirect(
    int mode,
    ffi.Pointer<ffi.Void> indirect,
  ) {
    return _glDrawArraysIndirect(
      mode,
      indirect,
    );
  }

  late final _glDrawArraysIndirectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, ffi.Pointer<ffi.Void>)>>(
      'glDrawArraysIndirect');
  late final _glDrawArraysIndirect = _glDrawArraysIndirectPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void glDrawElementsIndirect(
    int mode,
    int type,
    ffi.Pointer<ffi.Void> indirect,
  ) {
    return _glDrawElementsIndirect(
      mode,
      type,
      indirect,
    );
  }

  late final _glDrawElementsIndirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum,
              ffi.Pointer<ffi.Void>)>>('glDrawElementsIndirect');
  late final _glDrawElementsIndirect = _glDrawElementsIndirectPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Void>)>();

  void glFramebufferParameteri(
    int target,
    int pname,
    int param,
  ) {
    return _glFramebufferParameteri(
      target,
      pname,
      param,
    );
  }

  late final _glFramebufferParameteriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLint)>>(
          'glFramebufferParameteri');
  late final _glFramebufferParameteri =
      _glFramebufferParameteriPtr.asFunction<void Function(int, int, int)>();

  void glGetFramebufferParameteriv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetFramebufferParameteriv(
      target,
      pname,
      params,
    );
  }

  late final _glGetFramebufferParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum,
              ffi.Pointer<GLint>)>>('glGetFramebufferParameteriv');
  late final _glGetFramebufferParameteriv = _glGetFramebufferParameterivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetProgramInterfaceiv(
    int program,
    int programInterface,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetProgramInterfaceiv(
      program,
      programInterface,
      pname,
      params,
    );
  }

  late final _glGetProgramInterfaceivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLenum, GLenum,
              ffi.Pointer<GLint>)>>('glGetProgramInterfaceiv');
  late final _glGetProgramInterfaceiv = _glGetProgramInterfaceivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  int glGetProgramResourceIndex(
    int program,
    int programInterface,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetProgramResourceIndex(
      program,
      programInterface,
      name,
    );
  }

  late final _glGetProgramResourceIndexPtr = _lookup<
      ffi.NativeFunction<
          GLuint Function(GLuint, GLenum,
              ffi.Pointer<GLchar>)>>('glGetProgramResourceIndex');
  late final _glGetProgramResourceIndex = _glGetProgramResourceIndexPtr
      .asFunction<int Function(int, int, ffi.Pointer<GLchar>)>();

  void glGetProgramResourceName(
    int program,
    int programInterface,
    int index,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetProgramResourceName(
      program,
      programInterface,
      index,
      bufSize,
      length,
      name,
    );
  }

  late final _glGetProgramResourceNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLenum,
              GLuint,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetProgramResourceName');
  late final _glGetProgramResourceName =
      _glGetProgramResourceNamePtr.asFunction<
          void Function(
              int, int, int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  void glGetProgramResourceiv(
    int program,
    int programInterface,
    int index,
    int propCount,
    ffi.Pointer<GLenum> props,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetProgramResourceiv(
      program,
      programInterface,
      index,
      propCount,
      props,
      bufSize,
      length,
      params,
    );
  }

  late final _glGetProgramResourceivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLenum,
              GLuint,
              GLsizei,
              ffi.Pointer<GLenum>,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLint>)>>('glGetProgramResourceiv');
  late final _glGetProgramResourceiv = _glGetProgramResourceivPtr.asFunction<
      void Function(int, int, int, int, ffi.Pointer<GLenum>, int,
          ffi.Pointer<GLsizei>, ffi.Pointer<GLint>)>();

  int glGetProgramResourceLocation(
    int program,
    int programInterface,
    ffi.Pointer<GLchar> name,
  ) {
    return _glGetProgramResourceLocation(
      program,
      programInterface,
      name,
    );
  }

  late final _glGetProgramResourceLocationPtr = _lookup<
      ffi.NativeFunction<
          GLint Function(GLuint, GLenum,
              ffi.Pointer<GLchar>)>>('glGetProgramResourceLocation');
  late final _glGetProgramResourceLocation = _glGetProgramResourceLocationPtr
      .asFunction<int Function(int, int, ffi.Pointer<GLchar>)>();

  void glUseProgramStages(
    int pipeline,
    int stages,
    int program,
  ) {
    return _glUseProgramStages(
      pipeline,
      stages,
      program,
    );
  }

  late final _glUseProgramStagesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, GLbitfield, GLuint)>>(
      'glUseProgramStages');
  late final _glUseProgramStages =
      _glUseProgramStagesPtr.asFunction<void Function(int, int, int)>();

  void glActiveShaderProgram(
    int pipeline,
    int program,
  ) {
    return _glActiveShaderProgram(
      pipeline,
      program,
    );
  }

  late final _glActiveShaderProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glActiveShaderProgram');
  late final _glActiveShaderProgram =
      _glActiveShaderProgramPtr.asFunction<void Function(int, int)>();

  int glCreateShaderProgramv(
    int type,
    int count,
    ffi.Pointer<ffi.Pointer<GLchar>> strings,
  ) {
    return _glCreateShaderProgramv(
      type,
      count,
      strings,
    );
  }

  late final _glCreateShaderProgramvPtr = _lookup<
      ffi.NativeFunction<
          GLuint Function(GLenum, GLsizei,
              ffi.Pointer<ffi.Pointer<GLchar>>)>>('glCreateShaderProgramv');
  late final _glCreateShaderProgramv = _glCreateShaderProgramvPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Pointer<GLchar>>)>();

  void glBindProgramPipeline(
    int pipeline,
  ) {
    return _glBindProgramPipeline(
      pipeline,
    );
  }

  late final _glBindProgramPipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>(
          'glBindProgramPipeline');
  late final _glBindProgramPipeline =
      _glBindProgramPipelinePtr.asFunction<void Function(int)>();

  void glDeleteProgramPipelines(
    int n,
    ffi.Pointer<GLuint> pipelines,
  ) {
    return _glDeleteProgramPipelines(
      n,
      pipelines,
    );
  }

  late final _glDeleteProgramPipelinesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glDeleteProgramPipelines');
  late final _glDeleteProgramPipelines = _glDeleteProgramPipelinesPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  void glGenProgramPipelines(
    int n,
    ffi.Pointer<GLuint> pipelines,
  ) {
    return _glGenProgramPipelines(
      n,
      pipelines,
    );
  }

  late final _glGenProgramPipelinesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLsizei, ffi.Pointer<GLuint>)>>(
      'glGenProgramPipelines');
  late final _glGenProgramPipelines = _glGenProgramPipelinesPtr
      .asFunction<void Function(int, ffi.Pointer<GLuint>)>();

  int glIsProgramPipeline(
    int pipeline,
  ) {
    return _glIsProgramPipeline(
      pipeline,
    );
  }

  late final _glIsProgramPipelinePtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLuint)>>(
          'glIsProgramPipeline');
  late final _glIsProgramPipeline =
      _glIsProgramPipelinePtr.asFunction<int Function(int)>();

  void glGetProgramPipelineiv(
    int pipeline,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetProgramPipelineiv(
      pipeline,
      pname,
      params,
    );
  }

  late final _glGetProgramPipelineivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetProgramPipelineiv');
  late final _glGetProgramPipelineiv = _glGetProgramPipelineivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glProgramUniform1i(
    int program,
    int location,
    int v0,
  ) {
    return _glProgramUniform1i(
      program,
      location,
      v0,
    );
  }

  late final _glProgramUniform1iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLint, GLint)>>(
          'glProgramUniform1i');
  late final _glProgramUniform1i =
      _glProgramUniform1iPtr.asFunction<void Function(int, int, int)>();

  void glProgramUniform2i(
    int program,
    int location,
    int v0,
    int v1,
  ) {
    return _glProgramUniform2i(
      program,
      location,
      v0,
      v1,
    );
  }

  late final _glProgramUniform2iPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, GLint, GLint, GLint)>>(
      'glProgramUniform2i');
  late final _glProgramUniform2i =
      _glProgramUniform2iPtr.asFunction<void Function(int, int, int, int)>();

  void glProgramUniform3i(
    int program,
    int location,
    int v0,
    int v1,
    int v2,
  ) {
    return _glProgramUniform3i(
      program,
      location,
      v0,
      v1,
      v2,
    );
  }

  late final _glProgramUniform3iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, GLint, GLint, GLint)>>('glProgramUniform3i');
  late final _glProgramUniform3i = _glProgramUniform3iPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glProgramUniform4i(
    int program,
    int location,
    int v0,
    int v1,
    int v2,
    int v3,
  ) {
    return _glProgramUniform4i(
      program,
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  late final _glProgramUniform4iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLint, GLint, GLint,
              GLint)>>('glProgramUniform4i');
  late final _glProgramUniform4i = _glProgramUniform4iPtr
      .asFunction<void Function(int, int, int, int, int, int)>();

  void glProgramUniform1ui(
    int program,
    int location,
    int v0,
  ) {
    return _glProgramUniform1ui(
      program,
      location,
      v0,
    );
  }

  late final _glProgramUniform1uiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLint, GLuint)>>(
          'glProgramUniform1ui');
  late final _glProgramUniform1ui =
      _glProgramUniform1uiPtr.asFunction<void Function(int, int, int)>();

  void glProgramUniform2ui(
    int program,
    int location,
    int v0,
    int v1,
  ) {
    return _glProgramUniform2ui(
      program,
      location,
      v0,
      v1,
    );
  }

  late final _glProgramUniform2uiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, GLint, GLuint, GLuint)>>(
      'glProgramUniform2ui');
  late final _glProgramUniform2ui =
      _glProgramUniform2uiPtr.asFunction<void Function(int, int, int, int)>();

  void glProgramUniform3ui(
    int program,
    int location,
    int v0,
    int v1,
    int v2,
  ) {
    return _glProgramUniform3ui(
      program,
      location,
      v0,
      v1,
      v2,
    );
  }

  late final _glProgramUniform3uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, GLuint, GLuint, GLuint)>>('glProgramUniform3ui');
  late final _glProgramUniform3ui = _glProgramUniform3uiPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glProgramUniform4ui(
    int program,
    int location,
    int v0,
    int v1,
    int v2,
    int v3,
  ) {
    return _glProgramUniform4ui(
      program,
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  late final _glProgramUniform4uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLuint, GLuint, GLuint,
              GLuint)>>('glProgramUniform4ui');
  late final _glProgramUniform4ui = _glProgramUniform4uiPtr
      .asFunction<void Function(int, int, int, int, int, int)>();

  void glProgramUniform1f(
    int program,
    int location,
    double v0,
  ) {
    return _glProgramUniform1f(
      program,
      location,
      v0,
    );
  }

  late final _glProgramUniform1fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLint, GLfloat)>>(
          'glProgramUniform1f');
  late final _glProgramUniform1f =
      _glProgramUniform1fPtr.asFunction<void Function(int, int, double)>();

  void glProgramUniform2f(
    int program,
    int location,
    double v0,
    double v1,
  ) {
    return _glProgramUniform2f(
      program,
      location,
      v0,
      v1,
    );
  }

  late final _glProgramUniform2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, GLfloat, GLfloat)>>('glProgramUniform2f');
  late final _glProgramUniform2f = _glProgramUniform2fPtr
      .asFunction<void Function(int, int, double, double)>();

  void glProgramUniform3f(
    int program,
    int location,
    double v0,
    double v1,
    double v2,
  ) {
    return _glProgramUniform3f(
      program,
      location,
      v0,
      v1,
      v2,
    );
  }

  late final _glProgramUniform3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, GLfloat, GLfloat, GLfloat)>>('glProgramUniform3f');
  late final _glProgramUniform3f = _glProgramUniform3fPtr
      .asFunction<void Function(int, int, double, double, double)>();

  void glProgramUniform4f(
    int program,
    int location,
    double v0,
    double v1,
    double v2,
    double v3,
  ) {
    return _glProgramUniform4f(
      program,
      location,
      v0,
      v1,
      v2,
      v3,
    );
  }

  late final _glProgramUniform4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLfloat, GLfloat, GLfloat,
              GLfloat)>>('glProgramUniform4f');
  late final _glProgramUniform4f = _glProgramUniform4fPtr
      .asFunction<void Function(int, int, double, double, double, double)>();

  void glProgramUniform1iv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glProgramUniform1iv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform1ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLint>)>>('glProgramUniform1iv');
  late final _glProgramUniform1iv = _glProgramUniform1ivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glProgramUniform2iv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glProgramUniform2iv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform2ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLint>)>>('glProgramUniform2iv');
  late final _glProgramUniform2iv = _glProgramUniform2ivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glProgramUniform3iv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glProgramUniform3iv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform3ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLint>)>>('glProgramUniform3iv');
  late final _glProgramUniform3iv = _glProgramUniform3ivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glProgramUniform4iv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLint> value,
  ) {
    return _glProgramUniform4iv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform4ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLint>)>>('glProgramUniform4iv');
  late final _glProgramUniform4iv = _glProgramUniform4ivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glProgramUniform1uiv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glProgramUniform1uiv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform1uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLuint>)>>('glProgramUniform1uiv');
  late final _glProgramUniform1uiv = _glProgramUniform1uivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLuint>)>();

  void glProgramUniform2uiv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glProgramUniform2uiv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform2uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLuint>)>>('glProgramUniform2uiv');
  late final _glProgramUniform2uiv = _glProgramUniform2uivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLuint>)>();

  void glProgramUniform3uiv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glProgramUniform3uiv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform3uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLuint>)>>('glProgramUniform3uiv');
  late final _glProgramUniform3uiv = _glProgramUniform3uivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLuint>)>();

  void glProgramUniform4uiv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLuint> value,
  ) {
    return _glProgramUniform4uiv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform4uivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLuint>)>>('glProgramUniform4uiv');
  late final _glProgramUniform4uiv = _glProgramUniform4uivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLuint>)>();

  void glProgramUniform1fv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniform1fv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform1fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLfloat>)>>('glProgramUniform1fv');
  late final _glProgramUniform1fv = _glProgramUniform1fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniform2fv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniform2fv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLfloat>)>>('glProgramUniform2fv');
  late final _glProgramUniform2fv = _glProgramUniform2fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniform3fv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniform3fv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLfloat>)>>('glProgramUniform3fv');
  late final _glProgramUniform3fv = _glProgramUniform3fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniform4fv(
    int program,
    int location,
    int count,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniform4fv(
      program,
      location,
      count,
      value,
    );
  }

  late final _glProgramUniform4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLfloat>)>>('glProgramUniform4fv');
  late final _glProgramUniform4fv = _glProgramUniform4fvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix2fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix2fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix2fv');
  late final _glProgramUniformMatrix2fv = _glProgramUniformMatrix2fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix3fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix3fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix3fv');
  late final _glProgramUniformMatrix3fv = _glProgramUniformMatrix3fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix4fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix4fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix4fv');
  late final _glProgramUniformMatrix4fv = _glProgramUniformMatrix4fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix2x3fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix2x3fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix2x3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix2x3fv');
  late final _glProgramUniformMatrix2x3fv = _glProgramUniformMatrix2x3fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix3x2fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix3x2fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix3x2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix3x2fv');
  late final _glProgramUniformMatrix3x2fv = _glProgramUniformMatrix3x2fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix2x4fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix2x4fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix2x4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix2x4fv');
  late final _glProgramUniformMatrix2x4fv = _glProgramUniformMatrix2x4fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix4x2fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix4x2fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix4x2fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix4x2fv');
  late final _glProgramUniformMatrix4x2fv = _glProgramUniformMatrix4x2fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix3x4fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix3x4fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix3x4fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix3x4fv');
  late final _glProgramUniformMatrix3x4fv = _glProgramUniformMatrix3x4fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glProgramUniformMatrix4x3fv(
    int program,
    int location,
    int count,
    int transpose,
    ffi.Pointer<GLfloat> value,
  ) {
    return _glProgramUniformMatrix4x3fv(
      program,
      location,
      count,
      transpose,
      value,
    );
  }

  late final _glProgramUniformMatrix4x3fvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei, GLboolean,
              ffi.Pointer<GLfloat>)>>('glProgramUniformMatrix4x3fv');
  late final _glProgramUniformMatrix4x3fv = _glProgramUniformMatrix4x3fvPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<GLfloat>)>();

  void glValidateProgramPipeline(
    int pipeline,
  ) {
    return _glValidateProgramPipeline(
      pipeline,
    );
  }

  late final _glValidateProgramPipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint)>>(
          'glValidateProgramPipeline');
  late final _glValidateProgramPipeline =
      _glValidateProgramPipelinePtr.asFunction<void Function(int)>();

  void glGetProgramPipelineInfoLog(
    int pipeline,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> infoLog,
  ) {
    return _glGetProgramPipelineInfoLog(
      pipeline,
      bufSize,
      length,
      infoLog,
    );
  }

  late final _glGetProgramPipelineInfoLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetProgramPipelineInfoLog');
  late final _glGetProgramPipelineInfoLog =
      _glGetProgramPipelineInfoLogPtr.asFunction<
          void Function(int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  void glBindImageTexture(
    int unit,
    int texture,
    int level,
    int layered,
    int layer,
    int access,
    int format,
  ) {
    return _glBindImageTexture(
      unit,
      texture,
      level,
      layered,
      layer,
      access,
      format,
    );
  }

  late final _glBindImageTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLuint, GLint, GLboolean, GLint, GLenum,
              GLenum)>>('glBindImageTexture');
  late final _glBindImageTexture = _glBindImageTexturePtr
      .asFunction<void Function(int, int, int, int, int, int, int)>();

  void glGetBooleani_v(
    int target,
    int index,
    ffi.Pointer<GLboolean> data,
  ) {
    return _glGetBooleani_v(
      target,
      index,
      data,
    );
  }

  late final _glGetBooleani_vPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLuint, ffi.Pointer<GLboolean>)>>('glGetBooleani_v');
  late final _glGetBooleani_v = _glGetBooleani_vPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLboolean>)>();

  void glMemoryBarrier(
    int barriers,
  ) {
    return _glMemoryBarrier(
      barriers,
    );
  }

  late final _glMemoryBarrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLbitfield)>>(
          'glMemoryBarrier');
  late final _glMemoryBarrier =
      _glMemoryBarrierPtr.asFunction<void Function(int)>();

  void glMemoryBarrierByRegion(
    int barriers,
  ) {
    return _glMemoryBarrierByRegion(
      barriers,
    );
  }

  late final _glMemoryBarrierByRegionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLbitfield)>>(
          'glMemoryBarrierByRegion');
  late final _glMemoryBarrierByRegion =
      _glMemoryBarrierByRegionPtr.asFunction<void Function(int)>();

  void glTexStorage2DMultisample(
    int target,
    int samples,
    int internalformat,
    int width,
    int height,
    int fixedsamplelocations,
  ) {
    return _glTexStorage2DMultisample(
      target,
      samples,
      internalformat,
      width,
      height,
      fixedsamplelocations,
    );
  }

  late final _glTexStorage2DMultisamplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, GLsizei, GLsizei,
              GLboolean)>>('glTexStorage2DMultisample');
  late final _glTexStorage2DMultisample = _glTexStorage2DMultisamplePtr
      .asFunction<void Function(int, int, int, int, int, int)>();

  void glGetMultisamplefv(
    int pname,
    int index,
    ffi.Pointer<GLfloat> val,
  ) {
    return _glGetMultisamplefv(
      pname,
      index,
      val,
    );
  }

  late final _glGetMultisamplefvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLuint, ffi.Pointer<GLfloat>)>>('glGetMultisamplefv');
  late final _glGetMultisamplefv = _glGetMultisamplefvPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLfloat>)>();

  void glSampleMaski(
    int maskNumber,
    int mask,
  ) {
    return _glSampleMaski(
      maskNumber,
      mask,
    );
  }

  late final _glSampleMaskiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLbitfield)>>(
          'glSampleMaski');
  late final _glSampleMaski =
      _glSampleMaskiPtr.asFunction<void Function(int, int)>();

  void glGetTexLevelParameteriv(
    int target,
    int level,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetTexLevelParameteriv(
      target,
      level,
      pname,
      params,
    );
  }

  late final _glGetTexLevelParameterivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLenum,
              ffi.Pointer<GLint>)>>('glGetTexLevelParameteriv');
  late final _glGetTexLevelParameteriv = _glGetTexLevelParameterivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glGetTexLevelParameterfv(
    int target,
    int level,
    int pname,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glGetTexLevelParameterfv(
      target,
      level,
      pname,
      params,
    );
  }

  late final _glGetTexLevelParameterfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLint, GLenum,
              ffi.Pointer<GLfloat>)>>('glGetTexLevelParameterfv');
  late final _glGetTexLevelParameterfv = _glGetTexLevelParameterfvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glBindVertexBuffer(
    int bindingindex,
    int buffer,
    int offset,
    int stride,
  ) {
    return _glBindVertexBuffer(
      bindingindex,
      buffer,
      offset,
      stride,
    );
  }

  late final _glBindVertexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLuint, GLintptr, GLsizei)>>('glBindVertexBuffer');
  late final _glBindVertexBuffer =
      _glBindVertexBufferPtr.asFunction<void Function(int, int, int, int)>();

  void glVertexAttribFormat(
    int attribindex,
    int size,
    int type,
    int normalized,
    int relativeoffset,
  ) {
    return _glVertexAttribFormat(
      attribindex,
      size,
      type,
      normalized,
      relativeoffset,
    );
  }

  late final _glVertexAttribFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLenum, GLboolean,
              GLuint)>>('glVertexAttribFormat');
  late final _glVertexAttribFormat = _glVertexAttribFormatPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glVertexAttribIFormat(
    int attribindex,
    int size,
    int type,
    int relativeoffset,
  ) {
    return _glVertexAttribIFormat(
      attribindex,
      size,
      type,
      relativeoffset,
    );
  }

  late final _glVertexAttribIFormatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLuint, GLint, GLenum, GLuint)>>(
      'glVertexAttribIFormat');
  late final _glVertexAttribIFormat =
      _glVertexAttribIFormatPtr.asFunction<void Function(int, int, int, int)>();

  void glVertexAttribBinding(
    int attribindex,
    int bindingindex,
  ) {
    return _glVertexAttribBinding(
      attribindex,
      bindingindex,
    );
  }

  late final _glVertexAttribBindingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glVertexAttribBinding');
  late final _glVertexAttribBinding =
      _glVertexAttribBindingPtr.asFunction<void Function(int, int)>();

  void glVertexBindingDivisor(
    int bindingindex,
    int divisor,
  ) {
    return _glVertexBindingDivisor(
      bindingindex,
      divisor,
    );
  }

  late final _glVertexBindingDivisorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLuint)>>(
          'glVertexBindingDivisor');
  late final _glVertexBindingDivisor =
      _glVertexBindingDivisorPtr.asFunction<void Function(int, int)>();

  void glBlendBarrier() {
    return _glBlendBarrier();
  }

  late final _glBlendBarrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('glBlendBarrier');
  late final _glBlendBarrier = _glBlendBarrierPtr.asFunction<void Function()>();

  void glCopyImageSubData(
    int srcName,
    int srcTarget,
    int srcLevel,
    int srcX,
    int srcY,
    int srcZ,
    int dstName,
    int dstTarget,
    int dstLevel,
    int dstX,
    int dstY,
    int dstZ,
    int srcWidth,
    int srcHeight,
    int srcDepth,
  ) {
    return _glCopyImageSubData(
      srcName,
      srcTarget,
      srcLevel,
      srcX,
      srcY,
      srcZ,
      dstName,
      dstTarget,
      dstLevel,
      dstX,
      dstY,
      dstZ,
      srcWidth,
      srcHeight,
      srcDepth,
    );
  }

  late final _glCopyImageSubDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint,
              GLenum,
              GLint,
              GLint,
              GLint,
              GLint,
              GLuint,
              GLenum,
              GLint,
              GLint,
              GLint,
              GLint,
              GLsizei,
              GLsizei,
              GLsizei)>>('glCopyImageSubData');
  late final _glCopyImageSubData = _glCopyImageSubDataPtr.asFunction<
      void Function(int, int, int, int, int, int, int, int, int, int, int, int,
          int, int, int)>();

  void glDebugMessageControl(
    int source,
    int type,
    int severity,
    int count,
    ffi.Pointer<GLuint> ids,
    int enabled,
  ) {
    return _glDebugMessageControl(
      source,
      type,
      severity,
      count,
      ids,
      enabled,
    );
  }

  late final _glDebugMessageControlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLenum, GLsizei,
              ffi.Pointer<GLuint>, GLboolean)>>('glDebugMessageControl');
  late final _glDebugMessageControl = _glDebugMessageControlPtr.asFunction<
      void Function(int, int, int, int, ffi.Pointer<GLuint>, int)>();

  void glDebugMessageInsert(
    int source,
    int type,
    int id,
    int severity,
    int length,
    ffi.Pointer<GLchar> buf,
  ) {
    return _glDebugMessageInsert(
      source,
      type,
      id,
      severity,
      length,
      buf,
    );
  }

  late final _glDebugMessageInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLuint, GLenum, GLsizei,
              ffi.Pointer<GLchar>)>>('glDebugMessageInsert');
  late final _glDebugMessageInsert = _glDebugMessageInsertPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<GLchar>)>();

  void glDebugMessageCallback(
    GLDEBUGPROC callback,
    ffi.Pointer<ffi.Void> userParam,
  ) {
    return _glDebugMessageCallback(
      callback,
      userParam,
    );
  }

  late final _glDebugMessageCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLDEBUGPROC, ffi.Pointer<ffi.Void>)>>('glDebugMessageCallback');
  late final _glDebugMessageCallback = _glDebugMessageCallbackPtr
      .asFunction<void Function(GLDEBUGPROC, ffi.Pointer<ffi.Void>)>();

  int glGetDebugMessageLog(
    int count,
    int bufSize,
    ffi.Pointer<GLenum> sources,
    ffi.Pointer<GLenum> types,
    ffi.Pointer<GLuint> ids,
    ffi.Pointer<GLenum> severities,
    ffi.Pointer<GLsizei> lengths,
    ffi.Pointer<GLchar> messageLog,
  ) {
    return _glGetDebugMessageLog(
      count,
      bufSize,
      sources,
      types,
      ids,
      severities,
      lengths,
      messageLog,
    );
  }

  late final _glGetDebugMessageLogPtr = _lookup<
      ffi.NativeFunction<
          GLuint Function(
              GLuint,
              GLsizei,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLuint>,
              ffi.Pointer<GLenum>,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetDebugMessageLog');
  late final _glGetDebugMessageLog = _glGetDebugMessageLogPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<GLenum>,
          ffi.Pointer<GLenum>,
          ffi.Pointer<GLuint>,
          ffi.Pointer<GLenum>,
          ffi.Pointer<GLsizei>,
          ffi.Pointer<GLchar>)>();

  void glPushDebugGroup(
    int source,
    int id,
    int length,
    ffi.Pointer<GLchar> message,
  ) {
    return _glPushDebugGroup(
      source,
      id,
      length,
      message,
    );
  }

  late final _glPushDebugGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLuint, GLsizei,
              ffi.Pointer<GLchar>)>>('glPushDebugGroup');
  late final _glPushDebugGroup = _glPushDebugGroupPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLchar>)>();

  void glPopDebugGroup() {
    return _glPopDebugGroup();
  }

  late final _glPopDebugGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('glPopDebugGroup');
  late final _glPopDebugGroup =
      _glPopDebugGroupPtr.asFunction<void Function()>();

  void glObjectLabel(
    int identifier,
    int name,
    int length,
    ffi.Pointer<GLchar> label,
  ) {
    return _glObjectLabel(
      identifier,
      name,
      length,
      label,
    );
  }

  late final _glObjectLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLuint, GLsizei, ffi.Pointer<GLchar>)>>('glObjectLabel');
  late final _glObjectLabel = _glObjectLabelPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLchar>)>();

  void glGetObjectLabel(
    int identifier,
    int name,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> label,
  ) {
    return _glGetObjectLabel(
      identifier,
      name,
      bufSize,
      length,
      label,
    );
  }

  late final _glGetObjectLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLuint, GLsizei, ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetObjectLabel');
  late final _glGetObjectLabel = _glGetObjectLabelPtr.asFunction<
      void Function(
          int, int, int, ffi.Pointer<GLsizei>, ffi.Pointer<GLchar>)>();

  void glObjectPtrLabel(
    ffi.Pointer<ffi.Void> ptr,
    int length,
    ffi.Pointer<GLchar> label,
  ) {
    return _glObjectPtrLabel(
      ptr,
      length,
      label,
    );
  }

  late final _glObjectPtrLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, GLsizei,
              ffi.Pointer<GLchar>)>>('glObjectPtrLabel');
  late final _glObjectPtrLabel = _glObjectPtrLabelPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<GLchar>)>();

  void glGetObjectPtrLabel(
    ffi.Pointer<ffi.Void> ptr,
    int bufSize,
    ffi.Pointer<GLsizei> length,
    ffi.Pointer<GLchar> label,
  ) {
    return _glGetObjectPtrLabel(
      ptr,
      bufSize,
      length,
      label,
    );
  }

  late final _glGetObjectPtrLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              GLsizei,
              ffi.Pointer<GLsizei>,
              ffi.Pointer<GLchar>)>>('glGetObjectPtrLabel');
  late final _glGetObjectPtrLabel = _glGetObjectPtrLabelPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<GLsizei>,
          ffi.Pointer<GLchar>)>();

  void glGetPointerv(
    int pname,
    ffi.Pointer<ffi.Pointer<ffi.Void>> params,
  ) {
    return _glGetPointerv(
      pname,
      params,
    );
  }

  late final _glGetPointervPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('glGetPointerv');
  late final _glGetPointerv = _glGetPointervPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void glEnablei(
    int target,
    int index,
  ) {
    return _glEnablei(
      target,
      index,
    );
  }

  late final _glEnableiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glEnablei');
  late final _glEnablei = _glEnableiPtr.asFunction<void Function(int, int)>();

  void glDisablei(
    int target,
    int index,
  ) {
    return _glDisablei(
      target,
      index,
    );
  }

  late final _glDisableiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLuint)>>(
          'glDisablei');
  late final _glDisablei = _glDisableiPtr.asFunction<void Function(int, int)>();

  void glBlendEquationi(
    int buf,
    int mode,
  ) {
    return _glBlendEquationi(
      buf,
      mode,
    );
  }

  late final _glBlendEquationiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLenum)>>(
          'glBlendEquationi');
  late final _glBlendEquationi =
      _glBlendEquationiPtr.asFunction<void Function(int, int)>();

  void glBlendEquationSeparatei(
    int buf,
    int modeRGB,
    int modeAlpha,
  ) {
    return _glBlendEquationSeparatei(
      buf,
      modeRGB,
      modeAlpha,
    );
  }

  late final _glBlendEquationSeparateiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLenum, GLenum)>>(
          'glBlendEquationSeparatei');
  late final _glBlendEquationSeparatei =
      _glBlendEquationSeparateiPtr.asFunction<void Function(int, int, int)>();

  void glBlendFunci(
    int buf,
    int src,
    int dst,
  ) {
    return _glBlendFunci(
      buf,
      src,
      dst,
    );
  }

  late final _glBlendFunciPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLuint, GLenum, GLenum)>>(
          'glBlendFunci');
  late final _glBlendFunci =
      _glBlendFunciPtr.asFunction<void Function(int, int, int)>();

  void glBlendFuncSeparatei(
    int buf,
    int srcRGB,
    int dstRGB,
    int srcAlpha,
    int dstAlpha,
  ) {
    return _glBlendFuncSeparatei(
      buf,
      srcRGB,
      dstRGB,
      srcAlpha,
      dstAlpha,
    );
  }

  late final _glBlendFuncSeparateiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, GLenum, GLenum, GLenum)>>('glBlendFuncSeparatei');
  late final _glBlendFuncSeparatei = _glBlendFuncSeparateiPtr
      .asFunction<void Function(int, int, int, int, int)>();

  void glColorMaski(
    int index,
    int r,
    int g,
    int b,
    int a,
  ) {
    return _glColorMaski(
      index,
      r,
      g,
      b,
      a,
    );
  }

  late final _glColorMaskiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLboolean, GLboolean, GLboolean,
              GLboolean)>>('glColorMaski');
  late final _glColorMaski =
      _glColorMaskiPtr.asFunction<void Function(int, int, int, int, int)>();

  int glIsEnabledi(
    int target,
    int index,
  ) {
    return _glIsEnabledi(
      target,
      index,
    );
  }

  late final _glIsEnablediPtr =
      _lookup<ffi.NativeFunction<GLboolean Function(GLenum, GLuint)>>(
          'glIsEnabledi');
  late final _glIsEnabledi =
      _glIsEnablediPtr.asFunction<int Function(int, int)>();

  void glDrawElementsBaseVertex(
    int mode,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
    int basevertex,
  ) {
    return _glDrawElementsBaseVertex(
      mode,
      count,
      type,
      indices,
      basevertex,
    );
  }

  late final _glDrawElementsBaseVertexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, ffi.Pointer<ffi.Void>,
              GLint)>>('glDrawElementsBaseVertex');
  late final _glDrawElementsBaseVertex = _glDrawElementsBaseVertexPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  void glDrawRangeElementsBaseVertex(
    int mode,
    int start,
    int end,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
    int basevertex,
  ) {
    return _glDrawRangeElementsBaseVertex(
      mode,
      start,
      end,
      count,
      type,
      indices,
      basevertex,
    );
  }

  late final _glDrawRangeElementsBaseVertexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLuint, GLuint, GLsizei, GLenum,
              ffi.Pointer<ffi.Void>, GLint)>>('glDrawRangeElementsBaseVertex');
  late final _glDrawRangeElementsBaseVertex =
      _glDrawRangeElementsBaseVertexPtr.asFunction<
          void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>, int)>();

  void glDrawElementsInstancedBaseVertex(
    int mode,
    int count,
    int type,
    ffi.Pointer<ffi.Void> indices,
    int instancecount,
    int basevertex,
  ) {
    return _glDrawElementsInstancedBaseVertex(
      mode,
      count,
      type,
      indices,
      instancecount,
      basevertex,
    );
  }

  late final _glDrawElementsInstancedBaseVertexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, ffi.Pointer<ffi.Void>,
              GLsizei, GLint)>>('glDrawElementsInstancedBaseVertex');
  late final _glDrawElementsInstancedBaseVertex =
      _glDrawElementsInstancedBaseVertexPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Void>, int, int)>();

  void glFramebufferTexture(
    int target,
    int attachment,
    int texture,
    int level,
  ) {
    return _glFramebufferTexture(
      target,
      attachment,
      texture,
      level,
    );
  }

  late final _glFramebufferTexturePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLuint, GLint)>>(
      'glFramebufferTexture');
  late final _glFramebufferTexture =
      _glFramebufferTexturePtr.asFunction<void Function(int, int, int, int)>();

  void glPrimitiveBoundingBox(
    double minX,
    double minY,
    double minZ,
    double minW,
    double maxX,
    double maxY,
    double maxZ,
    double maxW,
  ) {
    return _glPrimitiveBoundingBox(
      minX,
      minY,
      minZ,
      minW,
      maxX,
      maxY,
      maxZ,
      maxW,
    );
  }

  late final _glPrimitiveBoundingBoxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat,
              GLfloat, GLfloat, GLfloat)>>('glPrimitiveBoundingBox');
  late final _glPrimitiveBoundingBox = _glPrimitiveBoundingBoxPtr.asFunction<
      void Function(
          double, double, double, double, double, double, double, double)>();

  int glGetGraphicsResetStatus() {
    return _glGetGraphicsResetStatus();
  }

  late final _glGetGraphicsResetStatusPtr =
      _lookup<ffi.NativeFunction<GLenum Function()>>(
          'glGetGraphicsResetStatus');
  late final _glGetGraphicsResetStatus =
      _glGetGraphicsResetStatusPtr.asFunction<int Function()>();

  void glReadnPixels(
    int x,
    int y,
    int width,
    int height,
    int format,
    int type,
    int bufSize,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _glReadnPixels(
      x,
      y,
      width,
      height,
      format,
      type,
      bufSize,
      data,
    );
  }

  late final _glReadnPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum,
              GLsizei, ffi.Pointer<ffi.Void>)>>('glReadnPixels');
  late final _glReadnPixels = _glReadnPixelsPtr.asFunction<
      void Function(
          int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void glGetnUniformfv(
    int program,
    int location,
    int bufSize,
    ffi.Pointer<GLfloat> params,
  ) {
    return _glGetnUniformfv(
      program,
      location,
      bufSize,
      params,
    );
  }

  late final _glGetnUniformfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLfloat>)>>('glGetnUniformfv');
  late final _glGetnUniformfv = _glGetnUniformfvPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLfloat>)>();

  void glGetnUniformiv(
    int program,
    int location,
    int bufSize,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetnUniformiv(
      program,
      location,
      bufSize,
      params,
    );
  }

  late final _glGetnUniformivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLint, GLsizei, ffi.Pointer<GLint>)>>('glGetnUniformiv');
  late final _glGetnUniformiv = _glGetnUniformivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLint>)>();

  void glGetnUniformuiv(
    int program,
    int location,
    int bufSize,
    ffi.Pointer<GLuint> params,
  ) {
    return _glGetnUniformuiv(
      program,
      location,
      bufSize,
      params,
    );
  }

  late final _glGetnUniformuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLint, GLsizei,
              ffi.Pointer<GLuint>)>>('glGetnUniformuiv');
  late final _glGetnUniformuiv = _glGetnUniformuivPtr
      .asFunction<void Function(int, int, int, ffi.Pointer<GLuint>)>();

  void glMinSampleShading(
    double value,
  ) {
    return _glMinSampleShading(
      value,
    );
  }

  late final _glMinSampleShadingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLfloat)>>(
          'glMinSampleShading');
  late final _glMinSampleShading =
      _glMinSampleShadingPtr.asFunction<void Function(double)>();

  void glPatchParameteri(
    int pname,
    int value,
  ) {
    return _glPatchParameteri(
      pname,
      value,
    );
  }

  late final _glPatchParameteriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLint)>>(
          'glPatchParameteri');
  late final _glPatchParameteri =
      _glPatchParameteriPtr.asFunction<void Function(int, int)>();

  void glTexParameterIiv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glTexParameterIiv(
      target,
      pname,
      params,
    );
  }

  late final _glTexParameterIivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLint>)>>('glTexParameterIiv');
  late final _glTexParameterIiv = _glTexParameterIivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glTexParameterIuiv(
    int target,
    int pname,
    ffi.Pointer<GLuint> params,
  ) {
    return _glTexParameterIuiv(
      target,
      pname,
      params,
    );
  }

  late final _glTexParameterIuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLuint>)>>('glTexParameterIuiv');
  late final _glTexParameterIuiv = _glTexParameterIuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glGetTexParameterIiv(
    int target,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetTexParameterIiv(
      target,
      pname,
      params,
    );
  }

  late final _glGetTexParameterIivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLint>)>>('glGetTexParameterIiv');
  late final _glGetTexParameterIiv = _glGetTexParameterIivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetTexParameterIuiv(
    int target,
    int pname,
    ffi.Pointer<GLuint> params,
  ) {
    return _glGetTexParameterIuiv(
      target,
      pname,
      params,
    );
  }

  late final _glGetTexParameterIuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLenum, GLenum, ffi.Pointer<GLuint>)>>('glGetTexParameterIuiv');
  late final _glGetTexParameterIuiv = _glGetTexParameterIuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glSamplerParameterIiv(
    int sampler,
    int pname,
    ffi.Pointer<GLint> param,
  ) {
    return _glSamplerParameterIiv(
      sampler,
      pname,
      param,
    );
  }

  late final _glSamplerParameterIivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glSamplerParameterIiv');
  late final _glSamplerParameterIiv = _glSamplerParameterIivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glSamplerParameterIuiv(
    int sampler,
    int pname,
    ffi.Pointer<GLuint> param,
  ) {
    return _glSamplerParameterIuiv(
      sampler,
      pname,
      param,
    );
  }

  late final _glSamplerParameterIuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLuint>)>>('glSamplerParameterIuiv');
  late final _glSamplerParameterIuiv = _glSamplerParameterIuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glGetSamplerParameterIiv(
    int sampler,
    int pname,
    ffi.Pointer<GLint> params,
  ) {
    return _glGetSamplerParameterIiv(
      sampler,
      pname,
      params,
    );
  }

  late final _glGetSamplerParameterIivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GLuint, GLenum, ffi.Pointer<GLint>)>>('glGetSamplerParameterIiv');
  late final _glGetSamplerParameterIiv = _glGetSamplerParameterIivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLint>)>();

  void glGetSamplerParameterIuiv(
    int sampler,
    int pname,
    ffi.Pointer<GLuint> params,
  ) {
    return _glGetSamplerParameterIuiv(
      sampler,
      pname,
      params,
    );
  }

  late final _glGetSamplerParameterIuivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLuint, GLenum,
              ffi.Pointer<GLuint>)>>('glGetSamplerParameterIuiv');
  late final _glGetSamplerParameterIuiv = _glGetSamplerParameterIuivPtr
      .asFunction<void Function(int, int, ffi.Pointer<GLuint>)>();

  void glTexBuffer(
    int target,
    int internalformat,
    int buffer,
  ) {
    return _glTexBuffer(
      target,
      internalformat,
      buffer,
    );
  }

  late final _glTexBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GLenum, GLenum, GLuint)>>(
          'glTexBuffer');
  late final _glTexBuffer =
      _glTexBufferPtr.asFunction<void Function(int, int, int)>();

  void glTexBufferRange(
    int target,
    int internalformat,
    int buffer,
    int offset,
    int size,
  ) {
    return _glTexBufferRange(
      target,
      internalformat,
      buffer,
      offset,
      size,
    );
  }

  late final _glTexBufferRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLenum, GLuint, GLintptr,
              GLsizeiptr)>>('glTexBufferRange');
  late final _glTexBufferRange =
      _glTexBufferRangePtr.asFunction<void Function(int, int, int, int, int)>();

  void glTexStorage3DMultisample(
    int target,
    int samples,
    int internalformat,
    int width,
    int height,
    int depth,
    int fixedsamplelocations,
  ) {
    return _glTexStorage3DMultisample(
      target,
      samples,
      internalformat,
      width,
      height,
      depth,
      fixedsamplelocations,
    );
  }

  late final _glTexStorage3DMultisamplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei,
              GLboolean)>>('glTexStorage3DMultisample');
  late final _glTexStorage3DMultisample = _glTexStorage3DMultisamplePtr
      .asFunction<void Function(int, int, int, int, int, int, int)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;
typedef uintptr_t = ffi.UnsignedLongLong;

abstract class khronos_boolean_enum_t {
  static const int KHRONOS_FALSE = 0;
  static const int KHRONOS_TRUE = 1;
  static const int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 2147483647;
}

class __GLsync extends ffi.Opaque {}

typedef GLenum = ffi.UnsignedInt;
typedef GLuint = ffi.UnsignedInt;
typedef GLchar = ffi.Char;
typedef GLfloat = khronos_float_t;
typedef khronos_float_t = ffi.Float;
typedef GLsizeiptr = khronos_ssize_t;
typedef khronos_ssize_t = ffi.LongLong;
typedef GLintptr = khronos_intptr_t;
typedef khronos_intptr_t = ffi.LongLong;
typedef GLbitfield = ffi.UnsignedInt;
typedef GLint = ffi.Int;
typedef GLboolean = ffi.UnsignedChar;
typedef GLsizei = ffi.Int;
typedef GLubyte = khronos_uint8_t;
typedef khronos_uint8_t = ffi.UnsignedChar;
typedef GLsync = ffi.Pointer<__GLsync>;
typedef GLuint64 = khronos_uint64_t;
typedef khronos_uint64_t = ffi.Uint64;
typedef GLint64 = khronos_int64_t;
typedef khronos_int64_t = ffi.Int64;
typedef GLDEBUGPROC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(GLenum, GLenum, GLuint, GLenum, GLsizei,
            ffi.Pointer<GLchar>, ffi.Pointer<ffi.Void>)>>;

const int __gles2_gl32_h_ = 1;

const int __null = 0;

const int _WCHAR_T_DEFINED = 1;

const int KHRONOS_SUPPORT_INT64 = 1;

const int KHRONOS_SUPPORT_FLOAT = 1;

const int KHRONOS_MAX_ENUM = 2147483647;

const int GL_GLES_PROTOTYPES = 1;

const int GL_ES_VERSION_2_0 = 1;

const int GL_DEPTH_BUFFER_BIT = 256;

const int GL_STENCIL_BUFFER_BIT = 1024;

const int GL_COLOR_BUFFER_BIT = 16384;

const int GL_FALSE = 0;

const int GL_TRUE = 1;

const int GL_POINTS = 0;

const int GL_LINES = 1;

const int GL_LINE_LOOP = 2;

const int GL_LINE_STRIP = 3;

const int GL_TRIANGLES = 4;

const int GL_TRIANGLE_STRIP = 5;

const int GL_TRIANGLE_FAN = 6;

const int GL_ZERO = 0;

const int GL_ONE = 1;

const int GL_SRC_COLOR = 768;

const int GL_ONE_MINUS_SRC_COLOR = 769;

const int GL_SRC_ALPHA = 770;

const int GL_ONE_MINUS_SRC_ALPHA = 771;

const int GL_DST_ALPHA = 772;

const int GL_ONE_MINUS_DST_ALPHA = 773;

const int GL_DST_COLOR = 774;

const int GL_ONE_MINUS_DST_COLOR = 775;

const int GL_SRC_ALPHA_SATURATE = 776;

const int GL_FUNC_ADD = 32774;

const int GL_BLEND_EQUATION = 32777;

const int GL_BLEND_EQUATION_RGB = 32777;

const int GL_BLEND_EQUATION_ALPHA = 34877;

const int GL_FUNC_SUBTRACT = 32778;

const int GL_FUNC_REVERSE_SUBTRACT = 32779;

const int GL_BLEND_DST_RGB = 32968;

const int GL_BLEND_SRC_RGB = 32969;

const int GL_BLEND_DST_ALPHA = 32970;

const int GL_BLEND_SRC_ALPHA = 32971;

const int GL_CONSTANT_COLOR = 32769;

const int GL_ONE_MINUS_CONSTANT_COLOR = 32770;

const int GL_CONSTANT_ALPHA = 32771;

const int GL_ONE_MINUS_CONSTANT_ALPHA = 32772;

const int GL_BLEND_COLOR = 32773;

const int GL_ARRAY_BUFFER = 34962;

const int GL_ELEMENT_ARRAY_BUFFER = 34963;

const int GL_ARRAY_BUFFER_BINDING = 34964;

const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;

const int GL_STREAM_DRAW = 35040;

const int GL_STATIC_DRAW = 35044;

const int GL_DYNAMIC_DRAW = 35048;

const int GL_BUFFER_SIZE = 34660;

const int GL_BUFFER_USAGE = 34661;

const int GL_CURRENT_VERTEX_ATTRIB = 34342;

const int GL_FRONT = 1028;

const int GL_BACK = 1029;

const int GL_FRONT_AND_BACK = 1032;

const int GL_TEXTURE_2D = 3553;

const int GL_CULL_FACE = 2884;

const int GL_BLEND = 3042;

const int GL_DITHER = 3024;

const int GL_STENCIL_TEST = 2960;

const int GL_DEPTH_TEST = 2929;

const int GL_SCISSOR_TEST = 3089;

const int GL_POLYGON_OFFSET_FILL = 32823;

const int GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;

const int GL_SAMPLE_COVERAGE = 32928;

const int GL_NO_ERROR = 0;

const int GL_INVALID_ENUM = 1280;

const int GL_INVALID_VALUE = 1281;

const int GL_INVALID_OPERATION = 1282;

const int GL_OUT_OF_MEMORY = 1285;

const int GL_CW = 2304;

const int GL_CCW = 2305;

const int GL_LINE_WIDTH = 2849;

const int GL_ALIASED_POINT_SIZE_RANGE = 33901;

const int GL_ALIASED_LINE_WIDTH_RANGE = 33902;

const int GL_CULL_FACE_MODE = 2885;

const int GL_FRONT_FACE = 2886;

const int GL_DEPTH_RANGE = 2928;

const int GL_DEPTH_WRITEMASK = 2930;

const int GL_DEPTH_CLEAR_VALUE = 2931;

const int GL_DEPTH_FUNC = 2932;

const int GL_STENCIL_CLEAR_VALUE = 2961;

const int GL_STENCIL_FUNC = 2962;

const int GL_STENCIL_FAIL = 2964;

const int GL_STENCIL_PASS_DEPTH_FAIL = 2965;

const int GL_STENCIL_PASS_DEPTH_PASS = 2966;

const int GL_STENCIL_REF = 2967;

const int GL_STENCIL_VALUE_MASK = 2963;

const int GL_STENCIL_WRITEMASK = 2968;

const int GL_STENCIL_BACK_FUNC = 34816;

const int GL_STENCIL_BACK_FAIL = 34817;

const int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;

const int GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;

const int GL_STENCIL_BACK_REF = 36003;

const int GL_STENCIL_BACK_VALUE_MASK = 36004;

const int GL_STENCIL_BACK_WRITEMASK = 36005;

const int GL_VIEWPORT = 2978;

const int GL_SCISSOR_BOX = 3088;

const int GL_COLOR_CLEAR_VALUE = 3106;

const int GL_COLOR_WRITEMASK = 3107;

const int GL_UNPACK_ALIGNMENT = 3317;

const int GL_PACK_ALIGNMENT = 3333;

const int GL_MAX_TEXTURE_SIZE = 3379;

const int GL_MAX_VIEWPORT_DIMS = 3386;

const int GL_SUBPIXEL_BITS = 3408;

const int GL_RED_BITS = 3410;

const int GL_GREEN_BITS = 3411;

const int GL_BLUE_BITS = 3412;

const int GL_ALPHA_BITS = 3413;

const int GL_DEPTH_BITS = 3414;

const int GL_STENCIL_BITS = 3415;

const int GL_POLYGON_OFFSET_UNITS = 10752;

const int GL_POLYGON_OFFSET_FACTOR = 32824;

const int GL_TEXTURE_BINDING_2D = 32873;

const int GL_SAMPLE_BUFFERS = 32936;

const int GL_SAMPLES = 32937;

const int GL_SAMPLE_COVERAGE_VALUE = 32938;

const int GL_SAMPLE_COVERAGE_INVERT = 32939;

const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;

const int GL_COMPRESSED_TEXTURE_FORMATS = 34467;

const int GL_DONT_CARE = 4352;

const int GL_FASTEST = 4353;

const int GL_NICEST = 4354;

const int GL_GENERATE_MIPMAP_HINT = 33170;

const int GL_BYTE = 5120;

const int GL_UNSIGNED_BYTE = 5121;

const int GL_SHORT = 5122;

const int GL_UNSIGNED_SHORT = 5123;

const int GL_INT = 5124;

const int GL_UNSIGNED_INT = 5125;

const int GL_FLOAT = 5126;

const int GL_FIXED = 5132;

const int GL_DEPTH_COMPONENT = 6402;

const int GL_ALPHA = 6406;

const int GL_RGB = 6407;

const int GL_RGBA = 6408;

const int GL_LUMINANCE = 6409;

const int GL_LUMINANCE_ALPHA = 6410;

const int GL_UNSIGNED_SHORT_4_4_4_4 = 32819;

const int GL_UNSIGNED_SHORT_5_5_5_1 = 32820;

const int GL_UNSIGNED_SHORT_5_6_5 = 33635;

const int GL_FRAGMENT_SHADER = 35632;

const int GL_VERTEX_SHADER = 35633;

const int GL_MAX_VERTEX_ATTRIBS = 34921;

const int GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;

const int GL_MAX_VARYING_VECTORS = 36348;

const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;

const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;

const int GL_MAX_TEXTURE_IMAGE_UNITS = 34930;

const int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;

const int GL_SHADER_TYPE = 35663;

const int GL_DELETE_STATUS = 35712;

const int GL_LINK_STATUS = 35714;

const int GL_VALIDATE_STATUS = 35715;

const int GL_ATTACHED_SHADERS = 35717;

const int GL_ACTIVE_UNIFORMS = 35718;

const int GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;

const int GL_ACTIVE_ATTRIBUTES = 35721;

const int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;

const int GL_SHADING_LANGUAGE_VERSION = 35724;

const int GL_CURRENT_PROGRAM = 35725;

const int GL_NEVER = 512;

const int GL_LESS = 513;

const int GL_EQUAL = 514;

const int GL_LEQUAL = 515;

const int GL_GREATER = 516;

const int GL_NOTEQUAL = 517;

const int GL_GEQUAL = 518;

const int GL_ALWAYS = 519;

const int GL_KEEP = 7680;

const int GL_REPLACE = 7681;

const int GL_INCR = 7682;

const int GL_DECR = 7683;

const int GL_INVERT = 5386;

const int GL_INCR_WRAP = 34055;

const int GL_DECR_WRAP = 34056;

const int GL_VENDOR = 7936;

const int GL_RENDERER = 7937;

const int GL_VERSION = 7938;

const int GL_EXTENSIONS = 7939;

const int GL_NEAREST = 9728;

const int GL_LINEAR = 9729;

const int GL_NEAREST_MIPMAP_NEAREST = 9984;

const int GL_LINEAR_MIPMAP_NEAREST = 9985;

const int GL_NEAREST_MIPMAP_LINEAR = 9986;

const int GL_LINEAR_MIPMAP_LINEAR = 9987;

const int GL_TEXTURE_MAG_FILTER = 10240;

const int GL_TEXTURE_MIN_FILTER = 10241;

const int GL_TEXTURE_WRAP_S = 10242;

const int GL_TEXTURE_WRAP_T = 10243;

const int GL_TEXTURE = 5890;

const int GL_TEXTURE_CUBE_MAP = 34067;

const int GL_TEXTURE_BINDING_CUBE_MAP = 34068;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;

const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;

const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;

const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;

const int GL_TEXTURE0 = 33984;

const int GL_TEXTURE1 = 33985;

const int GL_TEXTURE2 = 33986;

const int GL_TEXTURE3 = 33987;

const int GL_TEXTURE4 = 33988;

const int GL_TEXTURE5 = 33989;

const int GL_TEXTURE6 = 33990;

const int GL_TEXTURE7 = 33991;

const int GL_TEXTURE8 = 33992;

const int GL_TEXTURE9 = 33993;

const int GL_TEXTURE10 = 33994;

const int GL_TEXTURE11 = 33995;

const int GL_TEXTURE12 = 33996;

const int GL_TEXTURE13 = 33997;

const int GL_TEXTURE14 = 33998;

const int GL_TEXTURE15 = 33999;

const int GL_TEXTURE16 = 34000;

const int GL_TEXTURE17 = 34001;

const int GL_TEXTURE18 = 34002;

const int GL_TEXTURE19 = 34003;

const int GL_TEXTURE20 = 34004;

const int GL_TEXTURE21 = 34005;

const int GL_TEXTURE22 = 34006;

const int GL_TEXTURE23 = 34007;

const int GL_TEXTURE24 = 34008;

const int GL_TEXTURE25 = 34009;

const int GL_TEXTURE26 = 34010;

const int GL_TEXTURE27 = 34011;

const int GL_TEXTURE28 = 34012;

const int GL_TEXTURE29 = 34013;

const int GL_TEXTURE30 = 34014;

const int GL_TEXTURE31 = 34015;

const int GL_ACTIVE_TEXTURE = 34016;

const int GL_REPEAT = 10497;

const int GL_CLAMP_TO_EDGE = 33071;

const int GL_MIRRORED_REPEAT = 33648;

const int GL_FLOAT_VEC2 = 35664;

const int GL_FLOAT_VEC3 = 35665;

const int GL_FLOAT_VEC4 = 35666;

const int GL_INT_VEC2 = 35667;

const int GL_INT_VEC3 = 35668;

const int GL_INT_VEC4 = 35669;

const int GL_BOOL = 35670;

const int GL_BOOL_VEC2 = 35671;

const int GL_BOOL_VEC3 = 35672;

const int GL_BOOL_VEC4 = 35673;

const int GL_FLOAT_MAT2 = 35674;

const int GL_FLOAT_MAT3 = 35675;

const int GL_FLOAT_MAT4 = 35676;

const int GL_SAMPLER_2D = 35678;

const int GL_SAMPLER_CUBE = 35680;

const int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;

const int GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;

const int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;

const int GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;

const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;

const int GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;

const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;

const int GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738;

const int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739;

const int GL_COMPILE_STATUS = 35713;

const int GL_INFO_LOG_LENGTH = 35716;

const int GL_SHADER_SOURCE_LENGTH = 35720;

const int GL_SHADER_COMPILER = 36346;

const int GL_SHADER_BINARY_FORMATS = 36344;

const int GL_NUM_SHADER_BINARY_FORMATS = 36345;

const int GL_LOW_FLOAT = 36336;

const int GL_MEDIUM_FLOAT = 36337;

const int GL_HIGH_FLOAT = 36338;

const int GL_LOW_INT = 36339;

const int GL_MEDIUM_INT = 36340;

const int GL_HIGH_INT = 36341;

const int GL_FRAMEBUFFER = 36160;

const int GL_RENDERBUFFER = 36161;

const int GL_RGBA4 = 32854;

const int GL_RGB5_A1 = 32855;

const int GL_RGB565 = 36194;

const int GL_DEPTH_COMPONENT16 = 33189;

const int GL_STENCIL_INDEX8 = 36168;

const int GL_RENDERBUFFER_WIDTH = 36162;

const int GL_RENDERBUFFER_HEIGHT = 36163;

const int GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;

const int GL_RENDERBUFFER_RED_SIZE = 36176;

const int GL_RENDERBUFFER_GREEN_SIZE = 36177;

const int GL_RENDERBUFFER_BLUE_SIZE = 36178;

const int GL_RENDERBUFFER_ALPHA_SIZE = 36179;

const int GL_RENDERBUFFER_DEPTH_SIZE = 36180;

const int GL_RENDERBUFFER_STENCIL_SIZE = 36181;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;

const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;

const int GL_COLOR_ATTACHMENT0 = 36064;

const int GL_DEPTH_ATTACHMENT = 36096;

const int GL_STENCIL_ATTACHMENT = 36128;

const int GL_NONE = 0;

const int GL_FRAMEBUFFER_COMPLETE = 36053;

const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;

const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;

const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;

const int GL_FRAMEBUFFER_UNSUPPORTED = 36061;

const int GL_FRAMEBUFFER_BINDING = 36006;

const int GL_RENDERBUFFER_BINDING = 36007;

const int GL_MAX_RENDERBUFFER_SIZE = 34024;

const int GL_INVALID_FRAMEBUFFER_OPERATION = 1286;

const int GL_ES_VERSION_3_0 = 1;

const int GL_READ_BUFFER = 3074;

const int GL_UNPACK_ROW_LENGTH = 3314;

const int GL_UNPACK_SKIP_ROWS = 3315;

const int GL_UNPACK_SKIP_PIXELS = 3316;

const int GL_PACK_ROW_LENGTH = 3330;

const int GL_PACK_SKIP_ROWS = 3331;

const int GL_PACK_SKIP_PIXELS = 3332;

const int GL_COLOR = 6144;

const int GL_DEPTH = 6145;

const int GL_STENCIL = 6146;

const int GL_RED = 6403;

const int GL_RGB8 = 32849;

const int GL_RGBA8 = 32856;

const int GL_RGB10_A2 = 32857;

const int GL_TEXTURE_BINDING_3D = 32874;

const int GL_UNPACK_SKIP_IMAGES = 32877;

const int GL_UNPACK_IMAGE_HEIGHT = 32878;

const int GL_TEXTURE_3D = 32879;

const int GL_TEXTURE_WRAP_R = 32882;

const int GL_MAX_3D_TEXTURE_SIZE = 32883;

const int GL_UNSIGNED_INT_2_10_10_10_REV = 33640;

const int GL_MAX_ELEMENTS_VERTICES = 33000;

const int GL_MAX_ELEMENTS_INDICES = 33001;

const int GL_TEXTURE_MIN_LOD = 33082;

const int GL_TEXTURE_MAX_LOD = 33083;

const int GL_TEXTURE_BASE_LEVEL = 33084;

const int GL_TEXTURE_MAX_LEVEL = 33085;

const int GL_MIN = 32775;

const int GL_MAX = 32776;

const int GL_DEPTH_COMPONENT24 = 33190;

const int GL_MAX_TEXTURE_LOD_BIAS = 34045;

const int GL_TEXTURE_COMPARE_MODE = 34892;

const int GL_TEXTURE_COMPARE_FUNC = 34893;

const int GL_CURRENT_QUERY = 34917;

const int GL_QUERY_RESULT = 34918;

const int GL_QUERY_RESULT_AVAILABLE = 34919;

const int GL_BUFFER_MAPPED = 35004;

const int GL_BUFFER_MAP_POINTER = 35005;

const int GL_STREAM_READ = 35041;

const int GL_STREAM_COPY = 35042;

const int GL_STATIC_READ = 35045;

const int GL_STATIC_COPY = 35046;

const int GL_DYNAMIC_READ = 35049;

const int GL_DYNAMIC_COPY = 35050;

const int GL_MAX_DRAW_BUFFERS = 34852;

const int GL_DRAW_BUFFER0 = 34853;

const int GL_DRAW_BUFFER1 = 34854;

const int GL_DRAW_BUFFER2 = 34855;

const int GL_DRAW_BUFFER3 = 34856;

const int GL_DRAW_BUFFER4 = 34857;

const int GL_DRAW_BUFFER5 = 34858;

const int GL_DRAW_BUFFER6 = 34859;

const int GL_DRAW_BUFFER7 = 34860;

const int GL_DRAW_BUFFER8 = 34861;

const int GL_DRAW_BUFFER9 = 34862;

const int GL_DRAW_BUFFER10 = 34863;

const int GL_DRAW_BUFFER11 = 34864;

const int GL_DRAW_BUFFER12 = 34865;

const int GL_DRAW_BUFFER13 = 34866;

const int GL_DRAW_BUFFER14 = 34867;

const int GL_DRAW_BUFFER15 = 34868;

const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;

const int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;

const int GL_SAMPLER_3D = 35679;

const int GL_SAMPLER_2D_SHADOW = 35682;

const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;

const int GL_PIXEL_PACK_BUFFER = 35051;

const int GL_PIXEL_UNPACK_BUFFER = 35052;

const int GL_PIXEL_PACK_BUFFER_BINDING = 35053;

const int GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;

const int GL_FLOAT_MAT2x3 = 35685;

const int GL_FLOAT_MAT2x4 = 35686;

const int GL_FLOAT_MAT3x2 = 35687;

const int GL_FLOAT_MAT3x4 = 35688;

const int GL_FLOAT_MAT4x2 = 35689;

const int GL_FLOAT_MAT4x3 = 35690;

const int GL_SRGB = 35904;

const int GL_SRGB8 = 35905;

const int GL_SRGB8_ALPHA8 = 35907;

const int GL_COMPARE_REF_TO_TEXTURE = 34894;

const int GL_MAJOR_VERSION = 33307;

const int GL_MINOR_VERSION = 33308;

const int GL_NUM_EXTENSIONS = 33309;

const int GL_RGBA32F = 34836;

const int GL_RGB32F = 34837;

const int GL_RGBA16F = 34842;

const int GL_RGB16F = 34843;

const int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069;

const int GL_MAX_ARRAY_TEXTURE_LAYERS = 35071;

const int GL_MIN_PROGRAM_TEXEL_OFFSET = 35076;

const int GL_MAX_PROGRAM_TEXEL_OFFSET = 35077;

const int GL_MAX_VARYING_COMPONENTS = 35659;

const int GL_TEXTURE_2D_ARRAY = 35866;

const int GL_TEXTURE_BINDING_2D_ARRAY = 35869;

const int GL_R11F_G11F_B10F = 35898;

const int GL_UNSIGNED_INT_10F_11F_11F_REV = 35899;

const int GL_RGB9_E5 = 35901;

const int GL_UNSIGNED_INT_5_9_9_9_REV = 35902;

const int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958;

const int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;

const int GL_TRANSFORM_FEEDBACK_VARYINGS = 35971;

const int GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972;

const int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;

const int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;

const int GL_RASTERIZER_DISCARD = 35977;

const int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;

const int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;

const int GL_INTERLEAVED_ATTRIBS = 35980;

const int GL_SEPARATE_ATTRIBS = 35981;

const int GL_TRANSFORM_FEEDBACK_BUFFER = 35982;

const int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;

const int GL_RGBA32UI = 36208;

const int GL_RGB32UI = 36209;

const int GL_RGBA16UI = 36214;

const int GL_RGB16UI = 36215;

const int GL_RGBA8UI = 36220;

const int GL_RGB8UI = 36221;

const int GL_RGBA32I = 36226;

const int GL_RGB32I = 36227;

const int GL_RGBA16I = 36232;

const int GL_RGB16I = 36233;

const int GL_RGBA8I = 36238;

const int GL_RGB8I = 36239;

const int GL_RED_INTEGER = 36244;

const int GL_RGB_INTEGER = 36248;

const int GL_RGBA_INTEGER = 36249;

const int GL_SAMPLER_2D_ARRAY = 36289;

const int GL_SAMPLER_2D_ARRAY_SHADOW = 36292;

const int GL_SAMPLER_CUBE_SHADOW = 36293;

const int GL_UNSIGNED_INT_VEC2 = 36294;

const int GL_UNSIGNED_INT_VEC3 = 36295;

const int GL_UNSIGNED_INT_VEC4 = 36296;

const int GL_INT_SAMPLER_2D = 36298;

const int GL_INT_SAMPLER_3D = 36299;

const int GL_INT_SAMPLER_CUBE = 36300;

const int GL_INT_SAMPLER_2D_ARRAY = 36303;

const int GL_UNSIGNED_INT_SAMPLER_2D = 36306;

const int GL_UNSIGNED_INT_SAMPLER_3D = 36307;

const int GL_UNSIGNED_INT_SAMPLER_CUBE = 36308;

const int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;

const int GL_BUFFER_ACCESS_FLAGS = 37151;

const int GL_BUFFER_MAP_LENGTH = 37152;

const int GL_BUFFER_MAP_OFFSET = 37153;

const int GL_DEPTH_COMPONENT32F = 36012;

const int GL_DEPTH32F_STENCIL8 = 36013;

const int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;

const int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;

const int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;

const int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;

const int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;

const int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;

const int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;

const int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;

const int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;

const int GL_FRAMEBUFFER_DEFAULT = 33304;

const int GL_FRAMEBUFFER_UNDEFINED = 33305;

const int GL_DEPTH_STENCIL_ATTACHMENT = 33306;

const int GL_DEPTH_STENCIL = 34041;

const int GL_UNSIGNED_INT_24_8 = 34042;

const int GL_DEPTH24_STENCIL8 = 35056;

const int GL_UNSIGNED_NORMALIZED = 35863;

const int GL_DRAW_FRAMEBUFFER_BINDING = 36006;

const int GL_READ_FRAMEBUFFER = 36008;

const int GL_DRAW_FRAMEBUFFER = 36009;

const int GL_READ_FRAMEBUFFER_BINDING = 36010;

const int GL_RENDERBUFFER_SAMPLES = 36011;

const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;

const int GL_MAX_COLOR_ATTACHMENTS = 36063;

const int GL_COLOR_ATTACHMENT1 = 36065;

const int GL_COLOR_ATTACHMENT2 = 36066;

const int GL_COLOR_ATTACHMENT3 = 36067;

const int GL_COLOR_ATTACHMENT4 = 36068;

const int GL_COLOR_ATTACHMENT5 = 36069;

const int GL_COLOR_ATTACHMENT6 = 36070;

const int GL_COLOR_ATTACHMENT7 = 36071;

const int GL_COLOR_ATTACHMENT8 = 36072;

const int GL_COLOR_ATTACHMENT9 = 36073;

const int GL_COLOR_ATTACHMENT10 = 36074;

const int GL_COLOR_ATTACHMENT11 = 36075;

const int GL_COLOR_ATTACHMENT12 = 36076;

const int GL_COLOR_ATTACHMENT13 = 36077;

const int GL_COLOR_ATTACHMENT14 = 36078;

const int GL_COLOR_ATTACHMENT15 = 36079;

const int GL_COLOR_ATTACHMENT16 = 36080;

const int GL_COLOR_ATTACHMENT17 = 36081;

const int GL_COLOR_ATTACHMENT18 = 36082;

const int GL_COLOR_ATTACHMENT19 = 36083;

const int GL_COLOR_ATTACHMENT20 = 36084;

const int GL_COLOR_ATTACHMENT21 = 36085;

const int GL_COLOR_ATTACHMENT22 = 36086;

const int GL_COLOR_ATTACHMENT23 = 36087;

const int GL_COLOR_ATTACHMENT24 = 36088;

const int GL_COLOR_ATTACHMENT25 = 36089;

const int GL_COLOR_ATTACHMENT26 = 36090;

const int GL_COLOR_ATTACHMENT27 = 36091;

const int GL_COLOR_ATTACHMENT28 = 36092;

const int GL_COLOR_ATTACHMENT29 = 36093;

const int GL_COLOR_ATTACHMENT30 = 36094;

const int GL_COLOR_ATTACHMENT31 = 36095;

const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;

const int GL_MAX_SAMPLES = 36183;

const int GL_HALF_FLOAT = 5131;

const int GL_MAP_READ_BIT = 1;

const int GL_MAP_WRITE_BIT = 2;

const int GL_MAP_INVALIDATE_RANGE_BIT = 4;

const int GL_MAP_INVALIDATE_BUFFER_BIT = 8;

const int GL_MAP_FLUSH_EXPLICIT_BIT = 16;

const int GL_MAP_UNSYNCHRONIZED_BIT = 32;

const int GL_RG = 33319;

const int GL_RG_INTEGER = 33320;

const int GL_R8 = 33321;

const int GL_RG8 = 33323;

const int GL_R16F = 33325;

const int GL_R32F = 33326;

const int GL_RG16F = 33327;

const int GL_RG32F = 33328;

const int GL_R8I = 33329;

const int GL_R8UI = 33330;

const int GL_R16I = 33331;

const int GL_R16UI = 33332;

const int GL_R32I = 33333;

const int GL_R32UI = 33334;

const int GL_RG8I = 33335;

const int GL_RG8UI = 33336;

const int GL_RG16I = 33337;

const int GL_RG16UI = 33338;

const int GL_RG32I = 33339;

const int GL_RG32UI = 33340;

const int GL_VERTEX_ARRAY_BINDING = 34229;

const int GL_R8_SNORM = 36756;

const int GL_RG8_SNORM = 36757;

const int GL_RGB8_SNORM = 36758;

const int GL_RGBA8_SNORM = 36759;

const int GL_SIGNED_NORMALIZED = 36764;

const int GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201;

const int GL_COPY_READ_BUFFER = 36662;

const int GL_COPY_WRITE_BUFFER = 36663;

const int GL_COPY_READ_BUFFER_BINDING = 36662;

const int GL_COPY_WRITE_BUFFER_BINDING = 36663;

const int GL_UNIFORM_BUFFER = 35345;

const int GL_UNIFORM_BUFFER_BINDING = 35368;

const int GL_UNIFORM_BUFFER_START = 35369;

const int GL_UNIFORM_BUFFER_SIZE = 35370;

const int GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;

const int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;

const int GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;

const int GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;

const int GL_MAX_UNIFORM_BLOCK_SIZE = 35376;

const int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;

const int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;

const int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;

const int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;

const int GL_ACTIVE_UNIFORM_BLOCKS = 35382;

const int GL_UNIFORM_TYPE = 35383;

const int GL_UNIFORM_SIZE = 35384;

const int GL_UNIFORM_NAME_LENGTH = 35385;

const int GL_UNIFORM_BLOCK_INDEX = 35386;

const int GL_UNIFORM_OFFSET = 35387;

const int GL_UNIFORM_ARRAY_STRIDE = 35388;

const int GL_UNIFORM_MATRIX_STRIDE = 35389;

const int GL_UNIFORM_IS_ROW_MAJOR = 35390;

const int GL_UNIFORM_BLOCK_BINDING = 35391;

const int GL_UNIFORM_BLOCK_DATA_SIZE = 35392;

const int GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;

const int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;

const int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;

const int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;

const int GL_INVALID_INDEX = 4294967295;

const int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154;

const int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157;

const int GL_MAX_SERVER_WAIT_TIMEOUT = 37137;

const int GL_OBJECT_TYPE = 37138;

const int GL_SYNC_CONDITION = 37139;

const int GL_SYNC_STATUS = 37140;

const int GL_SYNC_FLAGS = 37141;

const int GL_SYNC_FENCE = 37142;

const int GL_SYNC_GPU_COMMANDS_COMPLETE = 37143;

const int GL_UNSIGNALED = 37144;

const int GL_SIGNALED = 37145;

const int GL_ALREADY_SIGNALED = 37146;

const int GL_TIMEOUT_EXPIRED = 37147;

const int GL_CONDITION_SATISFIED = 37148;

const int GL_WAIT_FAILED = 37149;

const int GL_SYNC_FLUSH_COMMANDS_BIT = 1;

const int GL_TIMEOUT_IGNORED = -1;

const int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;

const int GL_ANY_SAMPLES_PASSED = 35887;

const int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;

const int GL_SAMPLER_BINDING = 35097;

const int GL_RGB10_A2UI = 36975;

const int GL_TEXTURE_SWIZZLE_R = 36418;

const int GL_TEXTURE_SWIZZLE_G = 36419;

const int GL_TEXTURE_SWIZZLE_B = 36420;

const int GL_TEXTURE_SWIZZLE_A = 36421;

const int GL_GREEN = 6404;

const int GL_BLUE = 6405;

const int GL_INT_2_10_10_10_REV = 36255;

const int GL_TRANSFORM_FEEDBACK = 36386;

const int GL_TRANSFORM_FEEDBACK_PAUSED = 36387;

const int GL_TRANSFORM_FEEDBACK_ACTIVE = 36388;

const int GL_TRANSFORM_FEEDBACK_BINDING = 36389;

const int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367;

const int GL_PROGRAM_BINARY_LENGTH = 34625;

const int GL_NUM_PROGRAM_BINARY_FORMATS = 34814;

const int GL_PROGRAM_BINARY_FORMATS = 34815;

const int GL_COMPRESSED_R11_EAC = 37488;

const int GL_COMPRESSED_SIGNED_R11_EAC = 37489;

const int GL_COMPRESSED_RG11_EAC = 37490;

const int GL_COMPRESSED_SIGNED_RG11_EAC = 37491;

const int GL_COMPRESSED_RGB8_ETC2 = 37492;

const int GL_COMPRESSED_SRGB8_ETC2 = 37493;

const int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;

const int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;

const int GL_COMPRESSED_RGBA8_ETC2_EAC = 37496;

const int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;

const int GL_TEXTURE_IMMUTABLE_FORMAT = 37167;

const int GL_MAX_ELEMENT_INDEX = 36203;

const int GL_NUM_SAMPLE_COUNTS = 37760;

const int GL_TEXTURE_IMMUTABLE_LEVELS = 33503;

const int GL_ES_VERSION_3_1 = 1;

const int GL_COMPUTE_SHADER = 37305;

const int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307;

const int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308;

const int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309;

const int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378;

const int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379;

const int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380;

const int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381;

const int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382;

const int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099;

const int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310;

const int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311;

const int GL_COMPUTE_WORK_GROUP_SIZE = 33383;

const int GL_DISPATCH_INDIRECT_BUFFER = 37102;

const int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103;

const int GL_COMPUTE_SHADER_BIT = 32;

const int GL_DRAW_INDIRECT_BUFFER = 36671;

const int GL_DRAW_INDIRECT_BUFFER_BINDING = 36675;

const int GL_MAX_UNIFORM_LOCATIONS = 33390;

const int GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648;

const int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649;

const int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651;

const int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652;

const int GL_MAX_FRAMEBUFFER_WIDTH = 37653;

const int GL_MAX_FRAMEBUFFER_HEIGHT = 37654;

const int GL_MAX_FRAMEBUFFER_SAMPLES = 37656;

const int GL_UNIFORM = 37601;

const int GL_UNIFORM_BLOCK = 37602;

const int GL_PROGRAM_INPUT = 37603;

const int GL_PROGRAM_OUTPUT = 37604;

const int GL_BUFFER_VARIABLE = 37605;

const int GL_SHADER_STORAGE_BLOCK = 37606;

const int GL_ATOMIC_COUNTER_BUFFER = 37568;

const int GL_TRANSFORM_FEEDBACK_VARYING = 37620;

const int GL_ACTIVE_RESOURCES = 37621;

const int GL_MAX_NAME_LENGTH = 37622;

const int GL_MAX_NUM_ACTIVE_VARIABLES = 37623;

const int GL_NAME_LENGTH = 37625;

const int GL_TYPE = 37626;

const int GL_ARRAY_SIZE = 37627;

const int GL_OFFSET = 37628;

const int GL_BLOCK_INDEX = 37629;

const int GL_ARRAY_STRIDE = 37630;

const int GL_MATRIX_STRIDE = 37631;

const int GL_IS_ROW_MAJOR = 37632;

const int GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633;

const int GL_BUFFER_BINDING = 37634;

const int GL_BUFFER_DATA_SIZE = 37635;

const int GL_NUM_ACTIVE_VARIABLES = 37636;

const int GL_ACTIVE_VARIABLES = 37637;

const int GL_REFERENCED_BY_VERTEX_SHADER = 37638;

const int GL_REFERENCED_BY_FRAGMENT_SHADER = 37642;

const int GL_REFERENCED_BY_COMPUTE_SHADER = 37643;

const int GL_TOP_LEVEL_ARRAY_SIZE = 37644;

const int GL_TOP_LEVEL_ARRAY_STRIDE = 37645;

const int GL_LOCATION = 37646;

const int GL_VERTEX_SHADER_BIT = 1;

const int GL_FRAGMENT_SHADER_BIT = 2;

const int GL_ALL_SHADER_BITS = 4294967295;

const int GL_PROGRAM_SEPARABLE = 33368;

const int GL_ACTIVE_PROGRAM = 33369;

const int GL_PROGRAM_PIPELINE_BINDING = 33370;

const int GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569;

const int GL_ATOMIC_COUNTER_BUFFER_START = 37570;

const int GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571;

const int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580;

const int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584;

const int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585;

const int GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586;

const int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590;

const int GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591;

const int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592;

const int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596;

const int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593;

const int GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595;

const int GL_MAX_IMAGE_UNITS = 36664;

const int GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066;

const int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070;

const int GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071;

const int GL_IMAGE_BINDING_NAME = 36666;

const int GL_IMAGE_BINDING_LEVEL = 36667;

const int GL_IMAGE_BINDING_LAYERED = 36668;

const int GL_IMAGE_BINDING_LAYER = 36669;

const int GL_IMAGE_BINDING_ACCESS = 36670;

const int GL_IMAGE_BINDING_FORMAT = 36974;

const int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1;

const int GL_ELEMENT_ARRAY_BARRIER_BIT = 2;

const int GL_UNIFORM_BARRIER_BIT = 4;

const int GL_TEXTURE_FETCH_BARRIER_BIT = 8;

const int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32;

const int GL_COMMAND_BARRIER_BIT = 64;

const int GL_PIXEL_BUFFER_BARRIER_BIT = 128;

const int GL_TEXTURE_UPDATE_BARRIER_BIT = 256;

const int GL_BUFFER_UPDATE_BARRIER_BIT = 512;

const int GL_FRAMEBUFFER_BARRIER_BIT = 1024;

const int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048;

const int GL_ATOMIC_COUNTER_BARRIER_BIT = 4096;

const int GL_ALL_BARRIER_BITS = 4294967295;

const int GL_IMAGE_2D = 36941;

const int GL_IMAGE_3D = 36942;

const int GL_IMAGE_CUBE = 36944;

const int GL_IMAGE_2D_ARRAY = 36947;

const int GL_INT_IMAGE_2D = 36952;

const int GL_INT_IMAGE_3D = 36953;

const int GL_INT_IMAGE_CUBE = 36955;

const int GL_INT_IMAGE_2D_ARRAY = 36958;

const int GL_UNSIGNED_INT_IMAGE_2D = 36963;

const int GL_UNSIGNED_INT_IMAGE_3D = 36964;

const int GL_UNSIGNED_INT_IMAGE_CUBE = 36966;

const int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969;

const int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063;

const int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064;

const int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065;

const int GL_READ_ONLY = 35000;

const int GL_WRITE_ONLY = 35001;

const int GL_READ_WRITE = 35002;

const int GL_SHADER_STORAGE_BUFFER = 37074;

const int GL_SHADER_STORAGE_BUFFER_BINDING = 37075;

const int GL_SHADER_STORAGE_BUFFER_START = 37076;

const int GL_SHADER_STORAGE_BUFFER_SIZE = 37077;

const int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078;

const int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082;

const int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083;

const int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084;

const int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085;

const int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086;

const int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087;

const int GL_SHADER_STORAGE_BARRIER_BIT = 8192;

const int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665;

const int GL_DEPTH_STENCIL_TEXTURE_MODE = 37098;

const int GL_STENCIL_INDEX = 6401;

const int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446;

const int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447;

const int GL_SAMPLE_POSITION = 36432;

const int GL_SAMPLE_MASK = 36433;

const int GL_SAMPLE_MASK_VALUE = 36434;

const int GL_TEXTURE_2D_MULTISAMPLE = 37120;

const int GL_MAX_SAMPLE_MASK_WORDS = 36441;

const int GL_MAX_COLOR_TEXTURE_SAMPLES = 37134;

const int GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135;

const int GL_MAX_INTEGER_SAMPLES = 37136;

const int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124;

const int GL_TEXTURE_SAMPLES = 37126;

const int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127;

const int GL_TEXTURE_WIDTH = 4096;

const int GL_TEXTURE_HEIGHT = 4097;

const int GL_TEXTURE_DEPTH = 32881;

const int GL_TEXTURE_INTERNAL_FORMAT = 4099;

const int GL_TEXTURE_RED_SIZE = 32860;

const int GL_TEXTURE_GREEN_SIZE = 32861;

const int GL_TEXTURE_BLUE_SIZE = 32862;

const int GL_TEXTURE_ALPHA_SIZE = 32863;

const int GL_TEXTURE_DEPTH_SIZE = 34890;

const int GL_TEXTURE_STENCIL_SIZE = 35057;

const int GL_TEXTURE_SHARED_SIZE = 35903;

const int GL_TEXTURE_RED_TYPE = 35856;

const int GL_TEXTURE_GREEN_TYPE = 35857;

const int GL_TEXTURE_BLUE_TYPE = 35858;

const int GL_TEXTURE_ALPHA_TYPE = 35859;

const int GL_TEXTURE_DEPTH_TYPE = 35862;

const int GL_TEXTURE_COMPRESSED = 34465;

const int GL_SAMPLER_2D_MULTISAMPLE = 37128;

const int GL_INT_SAMPLER_2D_MULTISAMPLE = 37129;

const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130;

const int GL_VERTEX_ATTRIB_BINDING = 33492;

const int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493;

const int GL_VERTEX_BINDING_DIVISOR = 33494;

const int GL_VERTEX_BINDING_OFFSET = 33495;

const int GL_VERTEX_BINDING_STRIDE = 33496;

const int GL_VERTEX_BINDING_BUFFER = 36687;

const int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497;

const int GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498;

const int GL_MAX_VERTEX_ATTRIB_STRIDE = 33509;

const int GL_ES_VERSION_3_2 = 1;

const int GL_MULTISAMPLE_LINE_WIDTH_RANGE = 37761;

const int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 37762;

const int GL_MULTIPLY = 37524;

const int GL_SCREEN = 37525;

const int GL_OVERLAY = 37526;

const int GL_DARKEN = 37527;

const int GL_LIGHTEN = 37528;

const int GL_COLORDODGE = 37529;

const int GL_COLORBURN = 37530;

const int GL_HARDLIGHT = 37531;

const int GL_SOFTLIGHT = 37532;

const int GL_DIFFERENCE = 37534;

const int GL_EXCLUSION = 37536;

const int GL_HSL_HUE = 37549;

const int GL_HSL_SATURATION = 37550;

const int GL_HSL_COLOR = 37551;

const int GL_HSL_LUMINOSITY = 37552;

const int GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346;

const int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;

const int GL_DEBUG_CALLBACK_FUNCTION = 33348;

const int GL_DEBUG_CALLBACK_USER_PARAM = 33349;

const int GL_DEBUG_SOURCE_API = 33350;

const int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351;

const int GL_DEBUG_SOURCE_SHADER_COMPILER = 33352;

const int GL_DEBUG_SOURCE_THIRD_PARTY = 33353;

const int GL_DEBUG_SOURCE_APPLICATION = 33354;

const int GL_DEBUG_SOURCE_OTHER = 33355;

const int GL_DEBUG_TYPE_ERROR = 33356;

const int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;

const int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;

const int GL_DEBUG_TYPE_PORTABILITY = 33359;

const int GL_DEBUG_TYPE_PERFORMANCE = 33360;

const int GL_DEBUG_TYPE_OTHER = 33361;

const int GL_DEBUG_TYPE_MARKER = 33384;

const int GL_DEBUG_TYPE_PUSH_GROUP = 33385;

const int GL_DEBUG_TYPE_POP_GROUP = 33386;

const int GL_DEBUG_SEVERITY_NOTIFICATION = 33387;

const int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388;

const int GL_DEBUG_GROUP_STACK_DEPTH = 33389;

const int GL_BUFFER = 33504;

const int GL_SHADER = 33505;

const int GL_PROGRAM = 33506;

const int GL_VERTEX_ARRAY = 32884;

const int GL_QUERY = 33507;

const int GL_PROGRAM_PIPELINE = 33508;

const int GL_SAMPLER = 33510;

const int GL_MAX_LABEL_LENGTH = 33512;

const int GL_MAX_DEBUG_MESSAGE_LENGTH = 37187;

const int GL_MAX_DEBUG_LOGGED_MESSAGES = 37188;

const int GL_DEBUG_LOGGED_MESSAGES = 37189;

const int GL_DEBUG_SEVERITY_HIGH = 37190;

const int GL_DEBUG_SEVERITY_MEDIUM = 37191;

const int GL_DEBUG_SEVERITY_LOW = 37192;

const int GL_DEBUG_OUTPUT = 37600;

const int GL_CONTEXT_FLAG_DEBUG_BIT = 2;

const int GL_STACK_OVERFLOW = 1283;

const int GL_STACK_UNDERFLOW = 1284;

const int GL_GEOMETRY_SHADER = 36313;

const int GL_GEOMETRY_SHADER_BIT = 4;

const int GL_GEOMETRY_VERTICES_OUT = 35094;

const int GL_GEOMETRY_INPUT_TYPE = 35095;

const int GL_GEOMETRY_OUTPUT_TYPE = 35096;

const int GL_GEOMETRY_SHADER_INVOCATIONS = 34943;

const int GL_LAYER_PROVOKING_VERTEX = 33374;

const int GL_LINES_ADJACENCY = 10;

const int GL_LINE_STRIP_ADJACENCY = 11;

const int GL_TRIANGLES_ADJACENCY = 12;

const int GL_TRIANGLE_STRIP_ADJACENCY = 13;

const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319;

const int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;

const int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;

const int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155;

const int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156;

const int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320;

const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321;

const int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442;

const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583;

const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589;

const int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069;

const int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079;

const int GL_FIRST_VERTEX_CONVENTION = 36429;

const int GL_LAST_VERTEX_CONVENTION = 36430;

const int GL_UNDEFINED_VERTEX = 33376;

const int GL_PRIMITIVES_GENERATED = 35975;

const int GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650;

const int GL_MAX_FRAMEBUFFER_LAYERS = 37655;

const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264;

const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263;

const int GL_REFERENCED_BY_GEOMETRY_SHADER = 37641;

const int GL_PRIMITIVE_BOUNDING_BOX = 37566;

const int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4;

const int GL_CONTEXT_FLAGS = 33310;

const int GL_LOSE_CONTEXT_ON_RESET = 33362;

const int GL_GUILTY_CONTEXT_RESET = 33363;

const int GL_INNOCENT_CONTEXT_RESET = 33364;

const int GL_UNKNOWN_CONTEXT_RESET = 33365;

const int GL_RESET_NOTIFICATION_STRATEGY = 33366;

const int GL_NO_RESET_NOTIFICATION = 33377;

const int GL_CONTEXT_LOST = 1287;

const int GL_SAMPLE_SHADING = 35894;

const int GL_MIN_SAMPLE_SHADING_VALUE = 35895;

const int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443;

const int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444;

const int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445;

const int GL_PATCHES = 14;

const int GL_PATCH_VERTICES = 36466;

const int GL_TESS_CONTROL_OUTPUT_VERTICES = 36469;

const int GL_TESS_GEN_MODE = 36470;

const int GL_TESS_GEN_SPACING = 36471;

const int GL_TESS_GEN_VERTEX_ORDER = 36472;

const int GL_TESS_GEN_POINT_MODE = 36473;

const int GL_ISOLINES = 36474;

const int GL_QUADS = 7;

const int GL_FRACTIONAL_ODD = 36475;

const int GL_FRACTIONAL_EVEN = 36476;

const int GL_MAX_PATCH_VERTICES = 36477;

const int GL_MAX_TESS_GEN_LEVEL = 36478;

const int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479;

const int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480;

const int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481;

const int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482;

const int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483;

const int GL_MAX_TESS_PATCH_COMPONENTS = 36484;

const int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485;

const int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486;

const int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489;

const int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490;

const int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924;

const int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925;

const int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382;

const int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582;

const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587;

const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588;

const int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067;

const int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068;

const int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080;

const int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081;

const int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313;

const int GL_IS_PER_PATCH = 37607;

const int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639;

const int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640;

const int GL_TESS_CONTROL_SHADER = 36488;

const int GL_TESS_EVALUATION_SHADER = 36487;

const int GL_TESS_CONTROL_SHADER_BIT = 8;

const int GL_TESS_EVALUATION_SHADER_BIT = 16;

const int GL_TEXTURE_BORDER_COLOR = 4100;

const int GL_CLAMP_TO_BORDER = 33069;

const int GL_TEXTURE_BUFFER = 35882;

const int GL_TEXTURE_BUFFER_BINDING = 35882;

const int GL_MAX_TEXTURE_BUFFER_SIZE = 35883;

const int GL_TEXTURE_BINDING_BUFFER = 35884;

const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885;

const int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279;

const int GL_SAMPLER_BUFFER = 36290;

const int GL_INT_SAMPLER_BUFFER = 36304;

const int GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312;

const int GL_IMAGE_BUFFER = 36945;

const int GL_INT_IMAGE_BUFFER = 36956;

const int GL_UNSIGNED_INT_IMAGE_BUFFER = 36967;

const int GL_TEXTURE_BUFFER_OFFSET = 37277;

const int GL_TEXTURE_BUFFER_SIZE = 37278;

const int GL_COMPRESSED_RGBA_ASTC_4x4 = 37808;

const int GL_COMPRESSED_RGBA_ASTC_5x4 = 37809;

const int GL_COMPRESSED_RGBA_ASTC_5x5 = 37810;

const int GL_COMPRESSED_RGBA_ASTC_6x5 = 37811;

const int GL_COMPRESSED_RGBA_ASTC_6x6 = 37812;

const int GL_COMPRESSED_RGBA_ASTC_8x5 = 37813;

const int GL_COMPRESSED_RGBA_ASTC_8x6 = 37814;

const int GL_COMPRESSED_RGBA_ASTC_8x8 = 37815;

const int GL_COMPRESSED_RGBA_ASTC_10x5 = 37816;

const int GL_COMPRESSED_RGBA_ASTC_10x6 = 37817;

const int GL_COMPRESSED_RGBA_ASTC_10x8 = 37818;

const int GL_COMPRESSED_RGBA_ASTC_10x10 = 37819;

const int GL_COMPRESSED_RGBA_ASTC_12x10 = 37820;

const int GL_COMPRESSED_RGBA_ASTC_12x12 = 37821;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 37840;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 37841;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 37842;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 37843;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 37844;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 37845;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 37846;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 37847;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 37848;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 37849;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 37850;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 37851;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 37852;

const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 37853;

const int GL_TEXTURE_CUBE_MAP_ARRAY = 36873;

const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874;

const int GL_SAMPLER_CUBE_MAP_ARRAY = 36876;

const int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877;

const int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878;

const int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879;

const int GL_IMAGE_CUBE_MAP_ARRAY = 36948;

const int GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959;

const int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970;

const int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122;

const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125;

const int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131;

const int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132;

const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133;
